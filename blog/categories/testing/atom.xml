<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Archaic Positives]]></title>
  <link href="http://ianmiller.nyc/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://ianmiller.nyc/"/>
  <updated>2014-11-18T11:36:57-05:00</updated>
  <id>http://ianmiller.nyc/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with Rack Sessions]]></title>
    <link href="http://ianmiller.nyc/blog/2014/09/29/working-with-rack-sessions/"/>
    <updated>2014-09-29T14:46:57-04:00</updated>
    <id>http://ianmiller.nyc/blog/2014/09/29/working-with-rack-sessions</id>
    <content type="html"><![CDATA[<p>I spent the last few days building a <a href="https://flatironschool.com">Flatiron School</a> lab that specifically focused on setting sessions within a small Sinatra app. The idea was that this lab would help students better understand the concept of a <code>session</code>, and how they allow web applications to maintain state. By going through several RSpec tests and making them pass, the students would iteratively see what the <code>session</code> variable values would be in each step, and would understand the process from start to finish. The problem that I ran into was that I was not able to directly access the <code>session</code> variable in Sinatra.</p>

<h3>The Root Problem?</h3>

<p>The fundamental issue was that in Rack (on top of which Sinatra is built) does not allow you to directly access the <code>sessions</code> variable. I could not access it when I was writing acceptance tests, and so I set out to resolve that issue.</p>

<h3>Troubleshoot, take 1</h3>

<p>The first step that I took to troubleshoot this was to read through <a href="http://stackoverflow.com/questions/5175854/rack-session-cookie-and-sinatra-setting-and-accessing-data">this StackOverflow post</a> to see how I could directly access and manipulate session data. So one underlying thorn in the side was that it&rsquo;s hard to directly access <code>sessions</code> for acceptance testing purposes. I found this <a href="https://github.com/railsware/rack_session_access">gem</a> that supposedly makes it easier for a developer to access and manipulate <code>sessions</code> variables.</p>

<p>I went down that road, and quickly realized that for the purposes of this lab, I was overcomplicating things a little bit. What the <code>Rack Session Access</code> gem does is that it provides middleware for your Sinatra app that allows you to set and obtain data for your application&rsquo;s current session. I didn&rsquo;t need to set anything - I just needed to be able to access the <code>sessions</code> hash and confirm that the values met the specifications set forth in my RSpec tests.</p>

<p>Next option.</p>

<h3>Troubleshoot, take 2</h3>

<p>The second step I took was to read this <a href="http://stackoverflow.com/questions/9113162/accessing-session-in-sinatra-middleware">post</a>. This gave a better in depth explanation of the issue I was having, which was that I couldn&rsquo;t directly access the <code>sessions</code> hash method in Rack middleware. To remedy this, the top-voted answer suggested that I try to access the <code>sessions</code> hash through the <code>env</code> hash. It was through this post that I realized what I was doing incorrectly all along. I didn&rsquo;t have to implement the solution that was suggested in this post, but I had an idea what I could do to resolve the problem.</p>

<p>Let&rsquo;s dig a little further.</p>

<h3>Identifying the Solution</h3>

<p>So how did I address this? So remember in the previous section that you can access the <code>sessions</code> hash through <code>env</code>. Before I address the solution, let&rsquo;s briefly run through the anatomy of a Rack <code>sessions</code> hash. When a new session is created, it creates a new <code>Rack::Request</code> object, as the example below shows.</p>

<pre><code class="ruby">def call(env)
  request = Rack::Request.new(env)
end
</code></pre>

<p>The <code>request</code> object, which is assigned to a new instance of <code>Rack::Request</code>, has a method called <code>session</code>. When you call this method on the <code>request</code> object, it will return the <code>sessions</code> hash.</p>

<p>Now, let&rsquo;s apply this in terms of acceptance testing. Using the <code>rack/test</code> module, I wrote the following method in my <code>spec_helper.rb</code> file:</p>

<pre><code class="ruby">def session
  last_request.env['rack.session']
end
</code></pre>

<p>The <code>last_request</code> attribute is actually a <code>Rack::MockRequest</code> object that is used to generate a request, such as a <code>get '/'</code> request method. You can access the <code>sessions</code> hash of <code>last_request</code> by accessing the <code>rack.session</code> key inside of the <code>env</code> method. Once I was able to access this, then I was able to write tests that could be used to test the values inside my <code>sessions</code> variable.</p>

<p>It&rsquo;s a very simple way to resolve the original problem, but it definitely threw me for a loop while I was in the process of problem solving. Isn&rsquo;t programming fun?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller Testing Via RSpec]]></title>
    <link href="http://ianmiller.nyc/blog/2014/02/27/controller-testing-via-rspec/"/>
    <updated>2014-02-27T10:01:37-05:00</updated>
    <id>http://ianmiller.nyc/blog/2014/02/27/controller-testing-via-rspec</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been testing controllers pretty often over the last few weeks, and wanted to write a few reminders to my future self. I&rsquo;ve been testing an app at work with RSpec, and have gleaned a few best practices to integrate into my unit tests for controllers.</p>

<p>First off, the purpose of controller testing is to test the controller actions directly and see what they do. For example, if we are testing a redirect, we want to make sure that the controller action is redirecting to the right path. It&rsquo;s important to follow the AAA pattern: Arrange, Act, and Assert. You set up the test by arranging a <code>before(:each)</code> statement, and setting up the data needed to execute a test via let blocks. Then you act upon the arranged data by manipulating it to the test&rsquo;s specifications. Then you assert that the arranged data should result in some specific action or result. Arrange, act, and assert.</p>

<p>Another tip to keep in mind. Avoid before(:all) statements whenever possible, because you hardly will ever need it, and it sort of goes against Sandi Metz&rsquo;s Single Responsibility Principle (SRP). If you ever actually do need it, you are most likely dealing with a very extraordinary circumstance. The before(:all) block can affect test-data stability due to unwanted side effects.</p>

<p>For BDD/Rspec language, prefer to use active language instead of passive language. Of course the system should do something. Let&rsquo;s write tests where the language asserts definitively that it does or does not do something, thereby documenting not what our system should do but what it does do. It&rsquo;s important to be as clear and succinct in our language about what our expectations are.</p>

<p>Finally, a small but important distinction between <code>let()</code> and <code>let!()</code>. An object defined in a <code>let()</code> statement is lazily evaluated, meaning that it won&rsquo;t instantiate that object until it has been called in a RSpec test. However, an object defined in a <code>let!()</code> statement is forcefully evaluated, and the object will be instantiated once the statement has been invoked.</p>

<p>Hopefully these thoughts and insights will prove useful to someone, as they will for me in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Foray into Cucumber Feature Testing]]></title>
    <link href="http://ianmiller.nyc/blog/2014/02/23/foray-into-cucumber-feature-testing/"/>
    <updated>2014-02-23T14:45:33-05:00</updated>
    <id>http://ianmiller.nyc/blog/2014/02/23/foray-into-cucumber-feature-testing</id>
    <content type="html"><![CDATA[<p>For the past 2 weeks, I have been getting more involved in Cucumber feature testing as a result of my day-to-day job. When I first started, I found the prospect of Rails feature testing daunting, because it seemed like a cumbersome task to implement on top of building actual application features.</p>

<p>We had built out some features for a client project that I&rsquo;m currently working on, and we had decided to implement testing for features via Cucumber, rather than solely relying on RSpec testing. There was a reason for taking this approach: when designing a feature, we didn&rsquo;t want to overtest our feature to the point where we were overemphasizing testing of what could be a very basic feature. Cucumber allows for all-around integration testing without being overly verbose and cumbersome.</p>

<p>The first feature test I wrote was for a &ldquo;Forgotten Password&rdquo; feature. I had to test a User that had forgotten his/her password, clicked on the &ldquo;Forgot Password?&rdquo; option at the login screen, and expect to recieve an email with instructions to reset the password. So you would set up the feature test as follows:</p>

<pre><code class="ruby Feature Story">Feature: Partner Password Reset
  As a Partner who forgot the password
  I need to be able to reset the password
  So that I can log in
</code></pre>

<p>The feature description describes the storyline in very simple, straightforward terms. You need three things when describing a feature: who, what, and why. As in English literature, those three questions are essential to building up any kind of story. Then I would describe the first scenario:</p>

<pre><code class="ruby Feature Scenario">Scenario: Send Reset Password Email
  Given I am a Partner who has forgotten the password
  When I am at the 'Forgot your password?' page
  And I type in my admin email address
  Then it should send me a 'Reset password instructions' email
  And it should come from the default administrator email address
</code></pre>

<p>The scenario describes step-by-step how the feature is  going to be tested, what the conditions are, and how the expectations should be met. You describe scenarios with three major keywords: <code>Given</code>, <code>When</code>, and <code>Then</code>. <code>Given</code> implies an implicit condition that is required for the scenario. <code>When</code> specifies an action or verb that should take place. <code>Then</code> explicitly states the result that should occur as a result of the action that took place under the <code>When</code> clause.</p>

<p>Once you run the cucumber command in Terminal, the Terminal will generate a list of steps, or tests, that correspond to the scenario that you have written out. The following is a such output of the reset password scenario discussed earlier.</p>

<pre><code class="ruby Reset Password Scenario Steps">Given(/^I am a Partner who has forgotten the password$/) do
  #pending 
end

When(/^I am at the 'Forgot your password\?' page$/) do
  #pending
end

When(/^I type in my admin email address$/) do
  #pending
end

Then(/^it should send me a 'Reset password instructions' email$/) do
  #pending
end

Then(/^it should come from the default NYTM address$/) do
  #pending
end

Then(/^it should result in a 'not found' error message$/) do
  #pending
end
</code></pre>

<p>Once the Cucumber test steps are generated and incorporated into a step definition script, then you can start filling in the test code as it corresponds to your application. In this situation, I need to generate a user object (via FactoryGirl-Rails gem that has been included in the Gemfile), manipulate the user interface via Capybara methods. The finalized step definitions are shown below.</p>

<pre><code class="ruby Reset Password Scenario Steps">Given(/^I am a Partner who has forgotten the password$/) do
  @user = FactoryGirl.create(:admin_user)
end

When(/^I am at the 'Forgot your password\?' page$/) do
  visit new_admin_user_password_path
end

When(/^I type in my admin email address$/) do
  fill_in "Email", with: @user.email
  click_on 'Reset My Password'
end

Then(/^it should send me a 'Reset password instructions' email$/) do
  @email = ActionMailer::Base.deliveries.first
  expect(@email.to.first).to eq(@user.email)
  expect(@email.subject).to eq('Reset password instructions')
end

Then(/^it should come from the default mailing address$/) do
  expect(@email.from.first).to eq('original@mailing.com')
end

Given(/^I am not a Partner$/) do
  @user = FactoryGirl.build(:admin_user)
end

When(/^I type in a non\-admin email address$/) do
  fill_in "Email", with: @user.email
  click_on 'Reset My Password'
end

Then(/^it should result in a 'not found' error message$/) do
  expect(page).to have_css('.inline-errors', :text =&gt; "not found")
end
</code></pre>

<p>Hopefully this gives you a general idea of how Cucumber feature tests are implemented. Each scenario that you generate must be short, succinct, and straightforward in regards to the feature that you&rsquo;re testing. It took me a while to figure out best practices for implementing such tests, but I was able to get the hang of it over the course of two weeks. Just keep practicing, and see if the feature story makes sense to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec: A Misunderstood Complement to Ruby]]></title>
    <link href="http://ianmiller.nyc/blog/2013/10/20/rspec-a-misunderstood-obstacle/"/>
    <updated>2013-10-20T21:37:00-04:00</updated>
    <id>http://ianmiller.nyc/blog/2013/10/20/rspec-a-misunderstood-obstacle</id>
    <content type="html"><![CDATA[<p>For the past few weeks, I have been dreading the moment when I would have to utilize RSpec on a regular basis.  Because RSpec is the testing framework for the Ruby language, I viewed it as an obstacle to my learning development.  After studying more about RSpec in the past few days, I&rsquo;m starting to realize that I have been viewing its fundamental purpose incorrectly.  RSpec is a complement to the Ruby developer&rsquo;s toolkit &ndash; it prevents unneccesary work by testing the behaviors of a framework.  In short, it is the blueprint of any application, and represents a guided set of directions that leads you to a finished product.</p>

<p>In this blog post, I&rsquo;ll discuss the basic premise of RSpec and also discuss a few ways to refactor RSpec code.</p>

<pre><code class="ruby RSpec Basic Syntax https://speakerdeck.com/pat/rspec-introduction">describe 'basic RSpec syntax' do 
    it 'describes how the code should behave' do
        User.code.should be(clear)
        User.code.should be(concise)
    end
end
</code></pre>

<p>Here&rsquo;s a simple example.</p>

<pre><code class="ruby Calculator">describe Calculator do 
    describe '#multiply' do
        it 'returns the product of its parameters' do
            calc = Calculator.new
            calc.multiply(4,5).should eq(20)
        end
    end
end
</code></pre>

<p>This example is to just show what RSpec was intended for in regards to test-driven development.  See how RSpec determines how the calculator should behave when the multiply method is called?  When given the parameters 4 and 5, the multiply method should return an integer value of 20.</p>

<pre><code class="ruby Refactor a name spec">describe Person do
    it 'responds to own name' do
        James = Person.new
        James.should respond_to(:name)
    end
end

describe Person do
    it 'responds to own name' do
        subject.should respond_to(:name)
    end
end
</code></pre>

<p>&ldquo;Subject&rdquo; always refers to an instance of a class.  In this case, James is an instance of the Person class, and the step of initializing a Person instance with the name James has been refactored by using &ldquo;subject.&rdquo;</p>

<pre><code class="ruby Using 'Expect' instead of 'Should'">describe Person do
    it 'responds to own name' do
        expect(subject).to respond_to(:name)
    end
end
</code></pre>

<p>This is a big change that I&rsquo;ve started to implement in my RSpec tests, largely because of issues that have to do with delegation.  There was a blog post (<a href="http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax">http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax</a>) that discussed the differences between &lsquo;expect&rsquo; and &lsquo;should.&rsquo;  My understanding of the Kernel library and the rspec-expectations are not very concrete yet, but it is partly a result of a library load.  If one library is loaded before the other, it can sometimes override syntax delegations for the same word.</p>

<p>Another reason is that it seems a little more clear to me in terms of understanding what&rsquo;s going on with the syntax, particularly when I am starting a new test from scratch.  Should semantically makes sense if you&rsquo;re writing tests for existing code, but not necessarily if you haven&rsquo;t written a line of code yet.</p>
]]></content>
  </entry>
  
</feed>
