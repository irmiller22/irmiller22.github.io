<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archaic Positives]]></title>
  <link href="http://irmiller22.github.io/atom.xml" rel="self"/>
  <link href="http://irmiller22.github.io/"/>
  <updated>2014-02-02T22:46:59-05:00</updated>
  <id>http://irmiller22.github.io/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Rails Link Shortener App]]></title>
    <link href="http://irmiller22.github.io/blog/2014/02/02/basic-rails-link-shortener-app/"/>
    
    <updated>2014-02-02T15:05:05-05:00</updated>
    <id>http://irmiller22.github.io/blog/2014/02/02/basic-rails-link-shortener-app</id>
    
    <content type="html"><![CDATA[<p>Over the last few days, there were primarily two things that I wanted to delve into conceptually and understand: MongoDB and the logic behind a link shortener. I decided to combine the two of these and create a simple Rails app in which you could shorten links.</p>

<p>So, what is MongoDB? MongoDB is what&rsquo;s called a <code>NoSQL</code> database technology. A <code>NoSQL</code> database doesn&rsquo;t rely on a series of rows and columns within tables like a <code>SQL</code>, or relational, database does. <code>NoSQL</code> databases can store information in a variety of ways, but in the case of MongoDB, it stores it via a document database. Each respective document that you enter into the Mongo database is very similar to a JSON object in that they have a key-value store. However, the primary difference is that you do not access the documents via the key (think of accessing elements in a hash), but rather you query the database for these document elements.</p>

<p>I started out the app by generating a new Rails app via <code>rails g new link_shortener</code>. Once the app is generated, you can also use the Mongoid gem to generate the config file for the MongoDB database via <code>rails g mongoid:config</code>. Once you generate the config file, you can read through the file, available at <code>mongoid.yml</code> within the app, for an in-depth explanation of Mongoid&rsquo;s capabilities.</p>

<p>Next step is to create the model. Since we have an app t hat is going to shorten URLs, we need to create a URL model, so that each URL can be represented within Ruby/Rails as an object.</p>

<p>In Rails, querying the database is very much like that of ActiveRecord. The same model commands, such as <code>where, find, find_or_create_by, save</code> are very much in place. Look at the Mongoid documentation to find out more.</p>

<p>Let&rsquo;s test it out.</p>

<figure class='code'><figcaption><span>Url Model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="no">Url</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://irmiller22.github.io&quot;</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Url _id: 52eeacee49524d08ce010000, url: &quot;http://irmiller22.github.io&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="no">Url</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://irmiller22.github.io&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Mongoid::Criteria</span>
</span><span class='line'>  <span class="ss">selector</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;url&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;http://irmiller22.github.io&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">options</span><span class="p">:</span>  <span class="p">{}</span>
</span><span class='line'>  <span class="ss">class</span><span class="p">:</span>    <span class="no">Url</span>
</span><span class='line'>  <span class="ss">embedded</span><span class="p">:</span> <span class="kp">false</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you&rsquo;ve set up a model to take care of persisting data to the database, we need a controller to eventually take the input, generate the right output, and getting the data to the appropriate routing destination. Let&rsquo;s generate the new controller: <code>rails g controller urls new</code>. Typically when you generate a controller, you generate all 7 of the RESTful actions, but in this case we&rsquo;re only interested in testing one action for the moment: new. This generates the following:</p>

<figure class='code'><figcaption><span>UrlsController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UrlsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;urls/new&quot;</span>
</span><span class='line'><span class="c1"># we will modify this to the following:</span>
</span><span class='line'><span class="c1"># resources :urls, only: [:new, :show, :create]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s fill in the logic for each of the actions in the Url controller.</p>

<figure class='code'><figcaption><span>UrlsController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UrlsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>      <span class="vi">@short_url</span> <span class="o">=</span> <span class="no">Url</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="vi">@short_url</span> <span class="o">=</span> <span class="no">Url</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">url_params</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@short_url</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>          <span class="n">flash</span><span class="o">[</span><span class="ss">:short_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@short_url</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>          <span class="n">redirect_to</span> <span class="n">new_url_url</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">render</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>      <span class="vi">@short_url</span> <span class="o">=</span> <span class="no">Url</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="vi">@short_url</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">url_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:url</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this simple case, I&rsquo;ll be resetting the link to the domain and the URL id, so it would look like this while running locally: <code>localhost:3000/f3e200091</code>. In my next refactor, I&rsquo;ll end up generating a random string, but this will do for now.</p>

<p>Let&rsquo;s move on to the views:</p>

<figure class='code'><figcaption><span>application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">LinkShortener</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= stylesheet_link_tag    &quot;application&quot;, media: &quot;all&quot;, &quot;data-turbolinks-track&quot; =&gt; true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= javascript_include_tag &quot;application&quot;, &quot;data-turbolinks-track&quot; =&gt; true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= csrf_meta_tags %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= yield %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;% if flash[:short_id].present? %&gt;</span>
</span><span class='line'><span class="sx"> &lt;p class=</span><span class="s1">&#39;shortened_link&#39;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="no">The</span> <span class="n">shortened</span> <span class="no">URL</span> <span class="n">is</span> <span class="n">available</span> <span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;here&quot;</span><span class="p">,</span> <span class="n">url_url</span><span class="p">(</span><span class="n">flash</span><span class="o">[</span><span class="ss">:short_id</span><span class="o">]</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">     (Right click and copy link to share it).</span>
</span><span class='line'><span class="sx"> &lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>new.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for @short_url do |f| %&gt;</span>
</span><span class='line'><span class="sx"> </span>
</span><span class='line'><span class="sx"> &lt;p&gt;</span>
</span><span class='line'><span class="sx">     &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:url</span><span class="p">,</span> <span class="s2">&quot;Your URL:&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">     &lt;%= f.text_field :url %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr"> &lt;% if @short_url.errors[:url].any? %&gt;</span>
</span><span class='line'><span class="sr">     &lt;p class=&quot;error_messages&quot;&gt;</span>
</span><span class='line'><span class="sr">         The given URL &lt;%= @short_url.errors[:url].to_sentence %&gt;</span>
</span><span class='line'><span class="sr">     &lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx"> &lt;p class=&quot;button&quot;&gt;</span>
</span><span class='line'>      <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Shorten my URL&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two views are all you need to enable the link shortener. Fire up the rails server, and see your new link shortener in action!</p>

<br />


<p>EDIT: I incorrectly asserted that a MongoDB document element is similar to that of a key-value pair, and the appropriate revisions have been made. Many thanks to Myles Recny for catching that error.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[SCALA Basics: An Introduction]]></title>
    <link href="http://irmiller22.github.io/blog/2014/01/21/scala-basics-an-introduction/"/>
    
    <updated>2014-01-21T14:55:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2014/01/21/scala-basics-an-introduction</id>
    
    <content type="html"><![CDATA[<p>Scala is a programming language meant to address scalability issues that confront a large number of developers today. It is a statically typed language, meaning that it binds a type to a variable for the variable&rsquo;s lifetime, whereas dynamically typed languages bind the type to the value referenced by a variable. Simply, statically typed variables are immutable, whereas dynamically typed variables are mutable. Scala also supports both functional and object-oriented programming. It seems that these attributes would conflict with one another, but the argument is that both attributes in conjunction lead to synergies in both performance and architecture.</p>

<p>Let&rsquo;s get started on the introduction.</p>

<figure class='code'><figcaption><span>Print Out a String</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">book</span> <span class="k">=</span> <span class="s">&quot;Let&#39;s start learning about Scala&quot;</span>
</span><span class='line'><span class="c1">// java.lang.String = Let&#39;s start learning about Scala</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">book</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Let&#39;s start learning about Scala</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>val</code> is used to declare a read-only variable named <code>book</code>. In the next exercise, let&rsquo;s create a class that will take a number of parameters and then upcase them. We&rsquo;ll also refactor this function to make it more efficient and readable. Let&rsquo;s do it in the space below:</p>

<figure class='code'><figcaption><span>Upper Case Function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Upper</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">upper</span><span class="o">(</span><span class="n">strings</span><span class="k">:</span> <span class="kt">String*</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">strings</span><span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="n">s</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">toUpperCase</span><span class="o">())</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We&rsquo;ve defined the class <code>Upper</code>, and specified its parameter <code>strings</code> as an undefined number of string values, evidenced by the splat in <code>String*</code>. Then we specify the return type <code>Seq[String]</code> as a collection (or array) of strings. Then inside of the method&rsquo;s body, where we call the <code>map</code> method on the strings array, and passed in <code>(s:String) =&gt; s.toUpperCase()</code> as a function literal. In other words, it executes that function for each mapped parameter of the array <code>strings</code>.</p>

<p>Now let&rsquo;s initialize the Upper Case Function below:</p>

<figure class='code'><figcaption><span>Initializing Upper Case Function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">up</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Upper</span>
</span><span class='line'><span class="nc">Console</span><span class="o">.</span><span class="n">println</span><span class="o">(</span><span class="n">up</span><span class="o">.</span><span class="n">upper</span><span class="o">(</span><span class="s">&quot;run&quot;</span><span class="o">,</span><span class="s">&quot;ian&quot;</span><span class="o">,</span><span class="s">&quot;Fly&quot;</span><span class="o">,</span><span class="s">&quot;hero&quot;</span><span class="o">))</span>
</span><span class='line'><span class="c1">// Array(RUN, IAN, FLY, HERO)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>upper</code> method in the <code>Upper</code> class converts each parameter into an uppercase string, and returns them in an array.</p>

<p>Now let&rsquo;s refactor.</p>

<figure class='code'><figcaption><span>Upper Case Function Refactored #1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Upper</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">upper</span><span class="o">(</span><span class="n">strings</span><span class="k">:</span> <span class="kt">String*</span><span class="o">)</span> <span class="k">=</span> <span class="n">strings</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toUpperCase</span><span class="o">())</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">Upper</span><span class="o">.</span><span class="n">upper</span><span class="o">(</span><span class="s">&quot;run&quot;</span><span class="o">,</span><span class="s">&quot;ian&quot;</span><span class="o">,</span><span class="s">&quot;Fly&quot;</span><span class="o">,</span><span class="s">&quot;hero&quot;</span><span class="o">))</span>
</span><span class='line'><span class="c1">// Array(RUN, IAN, FLY, HERO)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve now declared an <code>object</code>, which in Scala is a singleton. In this situation, we only ever need one instance of Upper run at a time, so a singleton works appropriately. The <code>_</code> element inside of the <code>map</code> method is a placeholder variable that each string element will be assigned to before <code>toUpperCase()</code> is applied.</p>

<p>This is the first day I&rsquo;ve used Scala, and my first impression is that it&rsquo;s a lot like a hybrid of Ruby and Java/JavaScript. I still need to get better at understanding how collections are referenced to and organized inside of functions, but I&rsquo;m looking forward to learning more Scala.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[JavaScript Basics: An Introduction]]></title>
    <link href="http://irmiller22.github.io/blog/2014/01/03/javascript-basics-an-introduction/"/>
    
    <updated>2014-01-03T23:29:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2014/01/03/javascript-basics-an-introduction</id>
    
    <content type="html"><![CDATA[<p>Variable Declaration and Constant</p>

<figure class='code'><figcaption><span>Variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">y</span> <span class="o">=</span> <span class="mi">30</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">myMath</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>myMath in this case is the sum of variables x and y, which would be equal to 40.</p>

<figure class='code'><figcaption><span>Constant</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//const is a keyword that will declare a constant</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">CONSTANT</span> <span class="o">=</span> <span class="mi">22</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To find out what data type a variable is, you use the <code>typeof</code> method, as shown below:</p>

<figure class='code'><figcaption><span>Typeof method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">CAR</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">CAR</span><span class="p">);</span>
</span><span class='line'><span class="c1">//--&gt; number</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">string</span><span class="p">);</span>
</span><span class='line'><span class="c1">//--&gt; string</span>
</span></code></pre></td></tr></table></div></figure>


<p>Conditional Statements</p>

<p>You can also use an if/else statement to execute a given statement if a certain condition is true.  For example, if you wanted to check and see if a variable was considered a type of string, you&rsquo;d do the following:</p>

<figure class='code'><figcaption><span>Conditional</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Ian&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;string&quot;</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;It is a string.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;It ain&#39;t a string.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Local vs. Global Scope</p>

<figure class='code'><figcaption><span>Local vs. Global Scope</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">subtract</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The x and y variables that are outside of the add and subtract functions are called <code>global</code> variables.  They are declared outside of a function in the global scope, and are essentially accessible from anywhere inside of the program.</p>

<p>Functions create a new scope.  The x variable inside the add function and the y variable inside of the subtract function are known as <code>local</code> variables.  They exist only in the context of the respective function, and are not accessible outside of the function.  Think of it as the Vegas motto; what happens here, stays here.</p>

<p>Arrays in Javascript</p>

<p>Making a list inside of our app would involve the following:</p>

<figure class='code'><figcaption><span>List in JS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Ian Miller&quot;</span><span class="p">,</span> <span class="s2">&quot;James Wood&quot;</span><span class="p">,</span> <span class="s2">&quot;Saron Yitbarek&quot;</span><span class="p">,</span> <span class="s2">&quot;John Cafferty&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looping Through Arrays</p>

<figure class='code'><figcaption><span>Looping Through Array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">trackStudents</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">roster</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">roster</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">roster</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>              <span class="k">return</span> <span class="nx">list</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">==</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">roster</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a simple looping function that takes a roster, and adds a name to the roster array.  If the array does not have any elements in it, then it will push that element onto the end of the array, which will be the first element.  Otherwise, for each element in the array, if an array position is undefined, then it will set that element equal to the name value.  Also, if it is the last element in the array, it will also push the name value to the end of the array.  Finally, once the whole array has been iterated through, it will return the array.</p>

<p>These are mostly for me to remember and repeat.  I&rsquo;m currently branching out into other languages at the moment, and will be focusing on JS, jQuery, and Ajax.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How to Generate Mailers via Rails]]></title>
    <link href="http://irmiller22.github.io/blog/2013/12/27/how-to-generate-mailers-via-rails/"/>
    
    <updated>2013-12-27T11:08:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/12/27/how-to-generate-mailers-via-rails</id>
    
    <content type="html"><![CDATA[<p>One topic that we never covered in regards to Rails was how to properly generate mailers (automatically generated emails from a web application).</p>

<p>I&rsquo;m covering this because I have not used mailers before, and I think it&rsquo;s a pretty pertinent feature of Rails that everyone should know.</p>

<p>I&rsquo;ll be using the example of a distributed solar generation product.  Whenever a consumer is experiencing unusually low solar energy production or energy generation patterns consistent with a malfunctioning module, it will send out a mailer notifying them of these issues.  In order to generate a mailer, you type in the following command:</p>

<figure class='code'><figcaption><span>Mailer Generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">mailer</span> <span class="no">SolarMailer</span> <span class="n">error_report</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next step is to set up the default settings of the mailer.</p>

<figure class='code'><figcaption><span>Mailer Settings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SolarMailer</span> <span class="o">&lt;</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">default</span> <span class="ss">from</span><span class="p">:</span> <span class="s2">&quot;administrator@solartech.com&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">error_report</span><span class="p">(</span><span class="n">panel</span><span class="p">,</span> <span class="n">customer</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mail</span> <span class="ss">to</span><span class="p">:</span> <span class="n">customer</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">subject</span><span class="p">:</span> <span class="s2">&quot;Panel </span><span class="si">#{</span><span class="n">panel</span><span class="o">.</span><span class="n">location</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">panel</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> is experiencing some technical issues.&quot;&quot;</span>
</span><span class='line'><span class="s2"> end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we have set up the default settings for the mailer, then we go to the Panel model in order to specify when the mailer should be sent out.</p>

<figure class='code'><figcaption><span>Panel model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Panel</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:module</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:check_power_yield</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_power_yield</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">power_yield</span> <span class="o">&lt;=</span> <span class="mi">1200</span> <span class="n">kWh</span> <span class="c1">#base power generation</span>
</span><span class='line'>          <span class="no">SolarMailer</span><span class="o">.</span><span class="n">error_report</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">customer</span><span class="p">)</span><span class="o">.</span><span class="n">deliver</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much it for a basic mailer.  You can style the mailer using HTML/CSS, and you can also add front-end features via Javascript (AJAX, jQuery).</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Impetus for a Career in Programming]]></title>
    <link href="http://irmiller22.github.io/blog/2013/12/22/impetus-for-a-career-in-programming/"/>
    
    <updated>2013-12-22T13:26:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/12/22/impetus-for-a-career-in-programming</id>
    
    <content type="html"><![CDATA[<p>I’m currently on a flight over the continental US, on board Virgin America flight #27, headed from New York City to San Francisco, CA. Since I left NYC, I’ve been thinking a lot about my path to programming, and how I ultimately ended up in my current position. I think it’s a combination of several factors, most importantly the re-discovery of childhood pursuits.</p>

<p>Now for the moment of full disclosure: I have a severe hearing disability. I have roughly 75-85% hearing loss, and it’s hard to ascertain the exact number because it varies over time. I also think this fact goes a long ways towards explaining the meandering path behind me as I searched for my passion.</p>

<p>I’ve always had a pretty imaginative brain, always willing to go into wild tangents that test the limits of my creativity. I’m not sure if it’s a result of my brain’s capacity for randomness, or if it’s just my brain trying to make sense of the endless chatter being fired between the synapses of my neural pathways. Part of me is convinced that this is a result of my disability. When one of the five senses is limited (in this case, sound), another is enhanced. In my situation, I think my visual ability is much more nuanced than the average person. Perhaps that transfers over into my subconscious somehow, which would explain my visual acuity.</p>

<p>As a result of my hearing disability, I always enjoyed playing video games, particularly strategy games. It was something that gave me a full sense of control, something that I could, with 100% certainty, influence in terms of direction. In other words, it was an escape from the more difficult aspects of childhood, particularly my teenage years in which social interaction skyrocketed, leaving me behind my peers in social conversation.</p>

<p>From middle school until college, I was always interested in video games. As a result of video games, I started tinkering around with computers, my first experience coming when I figured out how to take control of my middle school’s computers using MS/DOS, and would perpetually confuse my fellow students by hijacking their mouse cursor and typing cryptic messages into their word processor application. I remember when I built my first website. It was a Geocities all-in-one basic site that focused on posting answers to my math homework. I don’t know if it was ever used at all by my classmates, but I remember the crappy blue background with the black and green Comic Sans font. Why did everyone use Comic Sans back then? What a colossal waste of a font. Anyways, the foundation of my technological curiosity had been firmly implanted by the time I was in middle school.</p>

<p>I was proficient in HTML and CSS back then, and was just starting to use JavaScript. I got so frustrated using JavaScript, largely because I was learning it on my own, and there were not many resources readily available in which you could find reliable answers. This is why having a community in which you can ask programming questions is so important. I lost my desire to continue my immersion into programming after a few months. Up until that point, many subjects came very easily to me then, such as English, Math, video games. I think the idea of a challenge discouraged me, and I was simply looking for something that provided instant gratification. I now realize that was a setback in terms of my mindset. Since then, the same question always came up from time to time: “what if?”. Looking back on it now, giving up was probably the biggest mistake I ever made.</p>

<p>Fast forward to my senior year of college. I was an Economics major, authoring a thesis that detailed solar energy subsidy programs and the long-term effects of that respective government’s approach. To summarize my thesis, among all countries with mature renewable energy policy programs, Germany did best in structuring a long-term approach while the United States bungled it. At that point, I was certain that I was going into a career in renewable energy finance or policy.</p>

<p>My career in renewable energy started off well. I became an intern at a very well respected renewable energy policy group in Washington, DC, and eventually wrote a white paper that discussed the merits of tax equity syndication for solar power development. At the conclusion of my internshp, I went to work for a biomass power startup, and gave me a wide breadth of expertise in project development in India and Tanzania.</p>

<p>In the spring of 2013, I decided to take an online course for Python on CourseRA just to play around with the idea of programming, not realizing that it would ultimately alter my career path 9 months later. Through Rice University’s Python class on CourseRA, we built a number of small games, such as Tic-Tac-Toe, Paddleboard, and a simple spaceship game that reminded me a little bit of a 2D version of Star Wars. I started to help out with web application development for my company, and the product was supposed to be a dashboard for energy analytics. First I helped write the business documentation for it, then started working with a programmer to build out the framework for the application itself. Over the course of 2 months of working with a programmer, I decided that programming was what I wanted to spend the rest of my life doing. The constant problem solving, discussions about best courses of action, and brainstorming was the most intellectually challenged and enriched that I had felt since high school and college. When you attain that desire for learning, you never really want to let it go. That desire siezes you like adrenaline does a bungee jumper jumping off a bridge: simply relentless.</p>

<p>I started taking courses on CourseAcademy and TeamTreehouse for Ruby. I had heard that Ruby was the hottest full-stack language at that point, and it was relatively straightforward to learn. I also applied to several boot camps, convinced that it was just what I needed to jumpstart my future. I ultimately settled on the Flatiron School in NYC because of its community-driven approach to programming, as well as its mission to help individuals find a passion in programming, and also encourage the involvement of women in what has been traditionally a male-dominated profession.</p>

<p>Fast forward five months later. I am two weeks out of boot camp at Flatiron School. Has it been worth it? The reasons may be different for everyone, but for me, it certainly has. I’d even go as far as to say that it’s been life changing. I’ve met the most wonderful group of individuals at Flatiron, and I’ve learned a lot from them. And I can now call myself a programmer. Not a skilled one yet, but that’s what I am working towards, step by step. But there are three important results that have been made possible by my experiences in the past year. I’ve discovered my passion. I’ve re-ignited my desire to learn. And I’ve finally learned the lesson that I should have learned long ago, even with a particularly limiting disability; there  is no limit.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Microhaus App: Part I]]></title>
    <link href="http://irmiller22.github.io/blog/2013/12/17/walkthrough-of-microhaus-app/"/>
    
    <updated>2013-12-17T12:42:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/12/17/walkthrough-of-microhaus-app</id>
    
    <content type="html"><![CDATA[<p>Today I decided to build a microblog app.  It is like a traditional blog, but it is private to a specific group of friends.  There are other options out there for a microblog, but I wanted to create the experience for myself, and how I would customize it for my group of friends.  After I finish the app, I plan to release it to my friends from college, and see what their feedback is.<br/>
I started out by creating a new app via rails.  For the moment, I am calling the app &ldquo;microhaus.&rdquo;  I came up with this name particularly because it&rsquo;s a microblog, and it is accessible only to a small number of people (a circle of friends, if you will).</p>

<figure class='code'><figcaption><span>Generating the new app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="kp">new</span> <span class="n">microhaus</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then made changes to the Gemfile in order to reflect the gem and database preferences.  This is what my gemfile currently looks like:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;turbolinks&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jbuilder&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;better_errors&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;binding_of_caller&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails_12factor&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:doc</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sdoc&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve set up my test, development, and production environments.  Later on, I will add in other gems in order to enhance microhaus, but for the initial buildout process, these gems will do.</p>

<p>I also created a User scaffold, which instantiates a migration for User, a controller, resources, erb templates, stylesheets, and tests.  After creating the scaffold, I ran the <code>rake db:migrate</code> command in order to migrate the Users table into the development database.</p>

<p>Secondly, I added a Post scaffold via the <code>rails g scaffold Post content:string user_id:integer group_id:integer</code> command.  The idea is to have a post that belongs to a user, and can be viewed by a group in which the users have the corresponding group id.  We want each post to be viewable by users of the same group.</p>

<p>At this point, I committed and pushed my changes up to Github.</p>

<p>The next step is to build out a secure token generator that will be used to verify cookies when a new login session is initialized.  Here&rsquo;s the code I used to set this up:</p>

<figure class='code'><figcaption><span>Secure Token Generator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">secure_token</span>
</span><span class='line'>  <span class="n">token_file</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;.secret&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">token_file</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">token_file</span><span class="p">)</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">token_file</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="n">token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Microhaus</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_key_base</span> <span class="o">=</span> <span class="n">secure_token</span>
</span></code></pre></td></tr></table></div></figure>


<p>My approach to building an application closely mirrors that of Michael Hartl&rsquo;s approach, so as he recommends, this would be a good time to start writing out some tests.  I wrote out RSpec tests to make sure the &ldquo;About, Home, and Contact&rdquo; pages properly render as specified in my ERB templates.</p>

<figure class='code'><figcaption><span>RSpec Tests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;Static pages&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:base_title</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;microhaus&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;Home page&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;should have the content &#39;microhaus&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">visit</span> <span class="s1">&#39;/static_pages/home&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_title</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;should not have the custom title &#39;Home&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">visit</span> <span class="s1">&#39;/static_pages/home&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to_not</span> <span class="n">have_title</span><span class="p">(</span><span class="s2">&quot;| Home&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;should have the base title&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">visit</span> <span class="s1">&#39;/static_pages/home&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_title</span><span class="p">(</span><span class="s2">&quot;microhaus&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;About page&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;should have the title &#39;About&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">visit</span> <span class="s1">&#39;/static_pages/about&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_title</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_title</span><span class="si">}</span><span class="s2"> | About&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;Contact page&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;should have the title &#39;Contact&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">visit</span> <span class="s1">&#39;/static_pages/contact&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_title</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_title</span><span class="si">}</span><span class="s2"> | Contact&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we have the basic building blocks in place that are necessary to horizontally plan out our application structure.  Once that structure is in place, then we can start building the application vertically, and make changes/additions as necessary.</p>

<p>The next step is to start building out the functionality for the ERB templates and also to build out the corresponding RSpec tests to ensure that the functionality is there.  These concepts will be covered in the next &ldquo;Microhaus&rdquo; post.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Big O Notation]]></title>
    <link href="http://irmiller22.github.io/blog/2013/12/14/big-o-notation/"/>
    
    <updated>2013-12-14T12:32:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/12/14/big-o-notation</id>
    
    <content type="html"><![CDATA[<p>Big O Notation is simply a measure of an algorithm&rsquo;s performance.  It focuses on two primary components: speed and size.  It also presents a best-case scenario of an algorithm as well as a worst-case scenario.</p>

<p>There are four primary scenarios that the majority of individuals will deal with in Big O Notation: O(1), O(n), O(n<sup>2</sup>), and O(log n).</p>

<p>The O(1) case simply refers to an algorithm in which the performance result is the same no matter the size of the input.  For example, a change in the value of a pre-existing array element will not change the time it takes to execute the algorithm.</p>

<figure class='code'><figcaption><span>O(1)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_1?</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The O(n) case is an algorithm that iterates over a range of elements, and the performance result increases for each additional element in the collection.  If it took 1 second to iterate through each element and I had a total of 10 elements in my collection, it would take 10 seconds (10/1).  If I had 500 elements in my collection, it would take 50 seconds (500/10).</p>

<p>The example below is a worst case scenario.  Since 10 is the last element in array, the each method won&rsquo;t break until it has run through and compared every value in the method.  If the comparator value were 1, then it would result in the best case scenario of O(1).  With every each statement that is used for comparison, it is always assumed that the worst case scenario is O(n), or the total size of the array.</p>

<figure class='code'><figcaption><span>O(n)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">comparison?</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="k">break</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The O(n<sup>2</sup>) case refers to a function whose performance increases in proportion to the square of the input size.  When an additional element is added to a collection, then the performance result will increase by the square of n.  This is particularly common in cases where you are iterating with nested loops.  You can take this even further: a nested loop with deeper iterations will result in a higher power value for n.  A loop with 2 nested loops inside of it will result in O(n<sup>3</sup>).  A well known example of this is the bubble sort.</p>

<figure class='code'><figcaption><span>O(n^2)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="p">(</span><span class="n">array</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">element</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="n">element</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>              <span class="n">array</span><span class="o">[</span><span class="n">element</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">element</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">element</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">array</span><span class="o">[</span><span class="n">element</span><span class="o">]</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The O(log n) case is an algorithm that selects the middle element of the collection, and compares it against a specific value.  If the value is higher than the middle element, it will perform the same operation against the upper half of the collection.  If the value is lower than the middle element, it&rsquo;ll perform the same operation against the lower half.  It keeps splitting each respective collection until it finds the element it&rsquo;s looking for, or until all possibilities have been exhausted.  An example of this is the merge sort.</p>

<figure class='code'><figcaption><span>O(log n)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">array</span> <span class="k">if</span> <span class="n">array</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">left</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="n">right</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">array</span><span class="o">.</span><span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">merge</span><span class="p">(</span><span class="n">merge_sort</span><span class="p">(</span><span class="n">left</span><span class="p">),</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">right</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sorted_array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">until</span> <span class="n">left</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span> <span class="n">right</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">sorted_array</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">left</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">?</span> <span class="n">left</span><span class="o">.</span><span class="n">shift</span> <span class="p">:</span> <span class="n">right</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">sorted_array</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">left</span><span class="p">)</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">sorted_array</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[The Art of a Question]]></title>
    <link href="http://irmiller22.github.io/blog/2013/11/17/the-art-of-a-question/"/>
    
    <updated>2013-11-17T22:27:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/11/17/the-art-of-a-question</id>
    
    <content type="html"><![CDATA[<p>For once, I want to take a break from exploring programming topics, and explore the rationale behind asking the right question.  Or rather, is it insomuch asking the right question, or guiding yourself in the right direction?  I think it is a little bit of both, with more emphasis on guidance.  It&rsquo;s not so much the silver-bullet question that will find you the answers, but it&rsquo;s a series of small, seemingly mundane questions that will ultimately lead to the epiphany where all of the previously perplexing concepts suddenly click together into a cohesive abstraction.</p>

<p>From time to time, I have found myself unable to ask the right questions.  It&rsquo;s as if there is a mental block in my head, unable to move forward beyond an obstacle, a metaphorical wrench stuck in the gears of my neocortex.  When that process unfolds, it is easy to doubt yourself and your ability to lead yourself out of the quagmire.  There is a reason why many individuals are daunted by the prospect of learning how to program.  It is a seemingly endless black hole that manifests itself as a negative feedback loop.  Despite the organized chaos that arises, most often overlook the key decision making component of programming: knowing where to start.</p>

<p>Knowing where to start isn&rsquo;t even the be-all-end-all solution to asking the right question.  It is simply a starting place.  Just because a runner starts at mile 0.0 after a starter pistol has fired, it does not mean that failure is imminent.  It is a mindset.  A runner tackles a marathon one step at a time.  Step by step, two feet turns into 10.  10 feet turns into a mile.  A mile turns into 10 miles.  10 miles turn into 20.  It&rsquo;s about breaking down the obstacle into manageable parts, and moving on from segment to segment.  This works because of two reasons: one, it keeps the logical decision making process flowing, and two, it pushes doubt and negative reinforcement to the periphery of human consciousness.</p>

<p>I read an article the other day discussing a concept called cognitive load.  According to George Miller, an eminent psychologist who taught at Princeton in the 1950&rsquo;s, our brain can realistically hold about seven pieces of information simultaneously at one point in time.  That number has since been revised to three or four.  This is a significant problem in the information age.  WIth historically recent advents such as the Internet, we are overly stimulated by the free flow of information, made possible largely by electronic devices.  Information enters and exits our cognitive consciousness that we don&rsquo;t grasp a basic level of understanding. We are unable to transfer it from our short-term to long-term memory stores, and consequently our ability to think critically and conceptually weakens.  Ergo, one step at a time.</p>

<p>So it seems that there are valid reasons, backed by science, psychology, and other studies focused on the human brain, that call for the fragmentation of a complete problem into parts.  If someone were to ask the question, &ldquo;how does a route ultimately render a view in a Rails project?&rdquo;  This is my thinking process below.</p>

<p>First off, there are multiple steps that between the route path and the view being rendered.  In MVC, there are typically eight steps in the chain of events.</p>

<pre><code>First, a browser sends a request to the Rails router.  
Second, a router sends the request to the respective controller.  
Third, the controller asks the model to retrieve the respective data needed for the request from the database.  
Fourth, the database sends that data back to the model.  
Fifth, the model sends the retrieved data back to the controller.  
Sixth, the data, encapsulated within the logic defined in the controller, is sent to the view.  Seventh, the view renders the data into the HTML page and is sent back to the controller.
Eighth, and finally, the controller sends the view action back to the browser where it is rendered.
</code></pre>

<p>This is an oversimplified example, but the question went from a generic question about a route and respective view rendering to a multifaceted question made up of smaller implicit questions about the 8 steps of MVC progression.  Each step can also be broken down further to better understand the process.  Each little question is a foundation that can be built upon, and will ultimately to a deep understanding of how a simple Rails application works.</p>

<p>So perhaps the best question is not simply a targeted question that seeks a one-dimensional answer, but rather a series of smaller, more basic questions derived from a larger question.  Simplicity is the best form of policy.  Start somewhere.  Plant your flag in the sand.  Let your initial question, and the subsequent chain of questions, be your guide.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[ActiveRecord: Validations]]></title>
    <link href="http://irmiller22.github.io/blog/2013/11/10/activerecord-validations/"/>
    
    <updated>2013-11-10T22:20:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/11/10/activerecord-validations</id>
    
    <content type="html"><![CDATA[<p>Validations are necessary to prevent invalid data from being persisted into the database.  They are necessary to allow for efficient data entry and processing, and prevent uncessary situations such as empty user-name fields pushing empty strings into a database.</p>

<p>ActiveRecord has a number of simple declarative validations, such as <code>validates_absence_of</code>, <code>validates_acceptance_of</code>, and <code>validates_confirmation_of</code>.  The one validation that I think would come in quite handy is the <code>validates_format_of</code> validation.  According to the &ldquo;Rails 4 Way&rdquo;, it&rsquo;s heavily dependent upon regular expressions, but it&rsquo;s an invaluable way to check the formats of email addresses, web URIs, etc.</p>

<p>You can also place constraints upon your validations.  For example, if you&rsquo;re using <code>validates_length_of</code> for usernames, you can specify a range that the length must fall between.  For example:</p>

<figure class='code'><figcaption><span>Validation - Username Length</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_length_of</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">within</span><span class="p">:</span> <span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">20</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it exceeds the length, then you can provide an error message option that follows the validation.</p>

<figure class='code'><figcaption><span>Validation - Username Length, Error</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_length_of</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">within</span><span class="p">:</span> <span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">20</span><span class="p">,</span>                 <span class="n">wrong_length</span><span class="p">:</span> <span class="s2">&quot;should be %{count} characters            long&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important aspect of validations is enforcing uniqueness among join models in the database.  We have used this recently (in our Flatiron-Kitchen-Ruby-003 assignment).  In order to enforce uniqueness, we have to define a scope constraint.  For example, if we had three classes, <code>Registration</code>, <code>Course</code> and <code>Student</code>, how could we make sure that a student isn&rsquo;t registered more than once for a particular class?  We would define the scope of the <code>Registration</code> class, as shown below:</p>

<figure class='code'><figcaption><span>Registration - Scope</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Registration</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:student</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:course</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:student_id</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="ss">:course_id</span><span class="p">,</span> <span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;can only register once per course&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another one that you run into all the time:</p>

<figure class='code'><figcaption><span>Email Validation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Email</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;already taken&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In short, validations help you place constraints upon your code to make it less error-prone in regards to data persistence.  Think of validations as a gatekeeper for your application data &mdash; it lets the good pieces in, and keeps the bad ones out, assuming that you have the proper constraints in place.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[OmniAuth: An Introduction]]></title>
    <link href="http://irmiller22.github.io/blog/2013/11/09/omniauth-an-introduction/"/>
    
    <updated>2013-11-09T14:52:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/11/09/omniauth-an-introduction</id>
    
    <content type="html"><![CDATA[<p>OmniAuth is simply middleware for authenticating users in applications.  Middleware is a way to filter requests and responses  that are coming into your application.  Each strategy that is used in the OmniAuth middleware is a class, and each strategy has two primary phases: a request phase and a callback phase.</p>

<p>Let me take a step back, and explain what middleware is.  Middleware is the interface that communicates between the application and the web server.  In a way, it is generally a software library that assists with, but is not directly involved, in the execution of a specific task.  Some examples include authentication, data logging, performance monitoring, caching, and the like.  In this particular case, OmniAuth is dealing with authentication.</p>

<figure class='code'><figcaption><span>config/initializers/omniauth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">OmniAuth</span><span class="p">:</span><span class="ss">:Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:twitter</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_KEY&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:facebook</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FACEBOOK_ID&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FACEBOOK_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two providers in the initializer above are called strategies.  A strategy, in OmniAuth&rsquo;s case, is a specific authentication class within the OmniAuth middleware structure.  OmniAuth has a large number of strategies, available at its Github documentation wiki, that provide authentication services for a wide number of websites, such as Twitter, Facebook, Github, and others (SOURCE &ndash; <a href="https://github.com/intridea/omniauth/wiki">https://github.com/intridea/omniauth/wiki</a>).</p>

<p>Let&rsquo;s walk through an example with Github.  In the request stage, a client sends a request to the app.  The client is redirected to the <code>/auth/Github</code> route, and it points to the OmniAuth Github strategy specified in the config/initializer directory within the Rails project structure.  In order to properly authenticate the user, an authentication request is fired off to Github through the provider strategy.  Once the user is properly authenticated, the callback method, specified through <code>/auth/github/callback</code>, creates a user information hash that can now be accessed through the app (SOURCE &ndash; <a href="https://speakerdeck.com/xfernandox/the-anatomy-of-omniauth">https://speakerdeck.com/xfernandox/the-anatomy-of-omniauth</a>).</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Explanation of NGinx and Passenger]]></title>
    <link href="http://irmiller22.github.io/blog/2013/11/04/explanation-of-nginx-and-passenger/"/>
    
    <updated>2013-11-04T20:19:00-05:00</updated>
    <id>http://irmiller22.github.io/blog/2013/11/04/explanation-of-nginx-and-passenger</id>
    
    <content type="html"><![CDATA[<p>NGinx is a open-source proxy server that primarily serves HTTP and HTTPS protocols.  Nginx was created to achieve three main goals: concurrency (process in which computations are executed simultaneously across several systems), high performance, and low memory usage.  It utilizes an event-driven approach to server requests, and allocates responses based upon server traffic and handling.  It has become a viable alternative to the Apache server model, which uses a process-driven methodology for handling large server requests.<br/>
NGinx has emerged largely as a result of increased demand for online services and the rise of the web as a platform.  Unlike Apache, NGinx has a master process that delegates work to worker processes, and it is designed handle a large number of server connections with a small amount of memory.</p>

<p>A number of companies, according to Wired, have run into scalability issues with Apache, and have transitioned to NGinx.  Facebook, Dropbox, and Wordpress are sites that utilize the NGinx server platform.</p>

<p><img class="center" src="http://www.wired.com/wiredenterprise/wp-content/uploads//2012/02/Screen-shot-2012-02-09-at-5.16.17-PM.png"></p>

<p>NGinx does not have a module load feature like Apache does, but that is where Passenger steps in, as it automates the module loading process.</p>

<p>Passenger is an Rack application server software that is often used in conjunction with NGinx.  Similarly with mod_php for hosting PHP apps on Apache, Passenger simplifies the process of hosting Ruby apps on NGinx.  Passenger automates the process of starting/stopping a server, restarting after a server crash, and dynamically adjusts the number of processes on a server based on traffic.  It also allows the server to run more than 1 instance of the app, allowing greater use of server resources.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Abstraction: Path to Simplicity]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/30/a-new-addendum/"/>
    
    <updated>2013-10-30T22:15:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/30/a-new-addendum</id>
    
    <content type="html"><![CDATA[<p>Abstraction is a concept that I have been thinking quite a lot about lately.  It is a concept that has largely been foreign to me, and it is slowly dawning on me that abstraction lies all around us.</p>

<p>The Webster Dictionary defines abstraction as a &ldquo;general idea or quality rather than an actual person, object, or event.&rdquo;  If we took the literal translation of the root abstractus (past participle of abstrahere), we would get &ldquo;to draw away; to detach or divert.&rdquo;  This term was first used by Oswald Herzog to describe the artistic attitudes and implementations of the Dadaists (in 1519, &lsquo;Der Abstrakte Expressionismus&rsquo;).  He wrote, &ldquo;it is pure creation.  It does not borrow objects from the real world; it creates its own objects &hellip; the abstract reveals the will of the artist; it becomes expression.&rdquo;  Abstraction, in the general sense of the word, is the process by which we generate semantic meaning with a concept.</p>

<p>In Ruby, abstraction is key to making your code achieve two things: more readable and reusable.  At this point, we&rsquo;ve learned to make our code more abstract via many concepts, such as MVC, ReST (Representational State Transfer), migrations, database abstraction via ActiveRecord, and routing.</p>

<p><img class="center" src="http://betweengo.com/docs/intro_rails/img/request_cycle.png"></p>

<p>A major component of Ruby on Rails has really nailed down the abstract aspect of coding for me: ActiveRecord and its corresponding ActionPacks.  ActiveRecord serves as the &ldquo;Model&rdquo; component relational database for Rails.  It comes with a set of query methods used for creating, retrieving, updating, or destroying data in the database.  The model also is used for establishing association between classes.  For example, a king could have a &ldquo;has_many&rdquo; relationship with his subjects, while a subject has a &ldquo;belongs_to&rdquo; relationship with his king.</p>

<figure class='code'><figcaption><span>Monarchy Association</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">King</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:subjects</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:lords</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Subject</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:king</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:lord</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:children</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActionController serves as the &ldquo;Controller&rdquo; engine of Rails.  By definition, a controller acts as the intermediary between the views and the models, and shuttles along HTTP responses, view renders, and redirects between the two.  The controller logic is encapsulated into each individual method, and each method should really have only one action in order to simplify the logic behind the controller.  The controller is designed to encapsulate the logic behind the app into specific CRUD methods, as shown below.</p>

<figure class='code'><figcaption><span>Subjects Controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SubjectsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_subject</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="vi">@subjects</span> <span class="o">=</span> <span class="no">Subject</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="no">Subject</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">retrieve_subject_params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">subjects_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>      <span class="vi">@subject</span> <span class="o">=</span> <span class="no">Subject</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@lords</span> <span class="o">=</span> <span class="no">Lord</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>      <span class="vi">@subject</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>      <span class="vi">@subject</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>      <span class="vi">@subject</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">retrieve_subject_params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">subjects_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>      <span class="vi">@subject</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">subjects_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_subject</span>
</span><span class='line'>      <span class="vi">@subject</span> <span class="o">=</span> <span class="no">Subject</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">retrieve_subject_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:subject</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:region</span><span class="p">,</span> <span class="ss">:lord_id</span><span class="p">,</span> <span class="ss">:class</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActionDispatch serves as a routing engine.  It is responsible for recognizing a path as specified in the model logic and dispatching it according to that route&rsquo;s specific action.  A route action should do only one thing, while keeping in convention via the &ldquo;fat model, skinny controller&rdquo; paradigm.  ActionDispatch takes care of the majority of your routes through resource routing.  With Rails, we can declare our <code>index, show, new, edit, create, update, and destroy</code> routes with one single line of code.  For example, if we wanted to have a resource for our king, subject, and lord classes, you&rsquo;d simply do the following:</p>

<figure class='code'><figcaption><span>Resources for King</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">KingdomOfValyria</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:kings</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:subjects</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:lords</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span> <span class="s1">&#39;front#index&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActionView is the Rails engine responsible for maintaining the HTML views that are rendered to the browser.  For each controller that&rsquo;s present in the app, there is a corresponding <code>app/views</code> directory that stores ERB templates used for HTML browser rendering.</p>

<figure class='code'><figcaption><span>Subject View</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%= @subject.name %&gt; - Subject of King &lt;%=</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">king</span><span class="o">.</span><span class="n">name</span> <span class="sx">%&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">Lord</span><span class="p">:</span> <span class="o">&lt;</span><span class="sx">%= @subject.lord.name %&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="sx">&lt;p&gt;Lives: &lt;%=</span> <span class="n">link_to</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">region</span><span class="p">,</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">region</span> <span class="sx">%&gt;&lt;/a&gt;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'><span class="sr">&lt;% unless @subject.children.empty? %&gt;</span>
</span><span class='line'><span class="sr">  &lt;h2&gt;Children&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% @subject.children.each </span><span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">      &lt;li&gt;</span><span class="o">&lt;</span><span class="sx">%= link_to child.name, child %&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="sx">    &lt;% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/ol&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Back&quot;</span><span class="p">,</span> <span class="n">subjects_path</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%= link_to &quot;Edit&quot;, edit_subject_path %&gt;</span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Delete&quot;</span><span class="p">,</span> <span class="vi">@subject</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Being able to effectively encapsulate your logic into separate logic categories is such a necessary skill-set to understand in order to become a proficient Ruby on Rails developer.  I&rsquo;m still in the process of learning how to whittle down my logic into singular methods and actions.  Ruby is a language that was built for abstraction.  It is meant to simplify logic in your code, and as Matz said once, &ldquo;I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy.&rdquo;</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[CRUD Applications: Importance of MVC]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/27/mvc-basics/"/>
    
    <updated>2013-10-27T23:03:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/27/mvc-basics</id>
    
    <content type="html"><![CDATA[<p>This past weekend, we had an assignment to build a CRUD application from scratch (well, almost).  A CRUD application is short for the four basic applications of relational database management and storage: create, read, update, and delete.  The CRUD application allows interfacing between a database, a user interface, and HTTP protocols.  I thought that I&rsquo;d go ahead and describe the main components of our CRUD application that we built this weekend.  There are thee specific ones to take note of: the controllers, models, and views.</p>

<p>Models are Ruby-specific classes that talk to the database, store, validate, and execute logic.  In other terms, they do all of the heavy lifting for our application.  They&rsquo;re basically the overworked accountant in the back room during tax season, churning out numbers while eating stale donuts at an absurd rate.</p>

<p>Views are elements that the user sees and interface with.  In short, they will provide the user experience through HTML, CSS, Javascript, and other front-end aspects.  They&rsquo;re the responsible ladies and gentlemen specifically positioned near the front of the office to provide a sense of culture and value to the outside user looking in.</p>

<p><img class="center" src="http://static2.fjcdn.com/thumbnails/comments/ah+alright+cheers.+yeah+doge+is+great+_56f6675509eadf36993a7e5b53c37f6d.jpg"></p>

<p>Controllers deal with the back-end requests from users, data requests, data submissions, sessions, and so on.  Any time you enter data into a form on a website, such as a login and password, you are interacting with a controller after you have hit the submit button.  After the request is sent, the controller sends the response to the server, and the server then combines that data into a HTTP response that is sent back to the user.</p>

<p><img class="center" src="http://i37.tinypic.com/2wrn985.gif" width="500"></p>

<p>One term that I&rsquo;ve read about describes how you should structure your models and controllers: &ldquo;fat models, skinny controllers.&rdquo;  The idea is that your models are not just a simple form of abstration in your database layer, but they represent the entirety of the logic in your application.  It should be able to stand alone from the rest of the application.  By convention, it should not interact with other components of your application.  Each controller method also should represent one action.  The controllers simply just shuttle requests between your views and your models (or your user interface and the application logic).  Another primary reason why this is an important programming practice is that you have enabled 2 things: one, you&rsquo;ve made it easy to reuse your code due to its abstraction and simplicity, and two, you&rsquo;ve also made it simpler for testing your code.</p>

<p><img class="center" src="http://www.mikebernat.com/images/cake/layercake.png" width="500"></p>

<p>That&rsquo;s what I wanted to review in this blog post.  I&rsquo;ll also share some of my favorite, but terrible, puns with you.  Some of you might have already heard some of these.</p>

<p>A truck transporting fruit in California overturned the other day.  It created quite a&hellip; jam.  That driver&rsquo;s career is also&hellip; toast.</p>

<p>The other day, I couldn&rsquo;t quite remember how to throw a boomerang, but eventually it came back.</p>

<p>Hello everyone (in Ruby 003 class on Monday, Oct 28), what is Avi&rsquo;s background?  Well, it&rsquo;s a white wall.</p>

<p><img class="center" src="https://i.chzbgr.com/maxW500/5870736384/hB08BCDAD/"></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[RSpec: A Misunderstood Complement to Ruby]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/20/rspec-a-misunderstood-obstacle/"/>
    
    <updated>2013-10-20T21:37:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/20/rspec-a-misunderstood-obstacle</id>
    
    <content type="html"><![CDATA[<p>For the past few weeks, I have been dreading the moment when I would have to utilize RSpec on a regular basis.  Because RSpec is the testing framework for the Ruby language, I viewed it as an obstacle to my learning development.  After studying more about RSpec in the past few days, I&rsquo;m starting to realize that I have been viewing its fundamental purpose incorrectly.  RSpec is a complement to the Ruby developer&rsquo;s toolkit &mdash; it prevents unneccesary work by testing the behaviors of a framework.  In short, it is the blueprint of any application, and represents a guided set of directions that leads you to a finished product.</p>

<p>In this blog post, I&rsquo;ll discuss the basic premise of RSpec and also discuss a few ways to refactor RSpec code.</p>

<figure class='code'><figcaption><span>RSpec Basic Syntax</span><a href='https://speakerdeck.com/pat/rspec-introduction'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;basic RSpec syntax&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;describes how the code should behave&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span><span class="p">(</span><span class="n">clear</span><span class="p">)</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span><span class="p">(</span><span class="n">concise</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a simple example.</p>

<figure class='code'><figcaption><span>Calculator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Calculator</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#multiply&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;returns the product of its parameters&#39;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">calc</span> <span class="o">=</span> <span class="no">Calculator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>          <span class="n">calc</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example is to just show what RSpec was intended for in regards to test-driven development.  See how RSpec determines how the calculator should behave when the multiply method is called?  When given the parameters 4 and 5, the multiply method should return an integer value of 20.</p>

<figure class='code'><figcaption><span>Refactor a name spec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Person</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;responds to own name&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">James</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="no">James</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Person</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;responds to own name&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">subject</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Subject&rdquo; always refers to an instance of a class.  In this case, James is an instance of the Person class, and the step of initializing a Person instance with the name James has been refactored by using &ldquo;subject.&rdquo;</p>

<figure class='code'><figcaption><span>Using &#8216;Expect&#8217; instead of &#8216;Should&#8217;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Person</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;responds to own name&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a big change that I&rsquo;ve started to implement in my RSpec tests, largely because of issues that have to do with delegation.  There was a blog post (<a href="http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax">http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax</a>) that discussed the differences between &lsquo;expect&rsquo; and &lsquo;should.&rsquo;  My understanding of the Kernel library and the rspec-expectations are not very concrete yet, but it is partly a result of a library load.  If one library is loaded before the other, it can sometimes override syntax delegations for the same word.</p>

<p>Another reason is that it seems a little more clear to me in terms of understanding what&rsquo;s going on with the syntax, particularly when I am starting a new test from scratch.  Should semantically makes sense if you&rsquo;re writing tests for existing code, but not necessarily if you haven&rsquo;t written a line of code yet.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[The Correct Usage of 'self' in a Class]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/15/the-correct-times-to-use-self-in-a-class/"/>
    
    <updated>2013-10-15T08:44:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/15/the-correct-times-to-use-self-in-a-class</id>
    
    <content type="html"><![CDATA[<p>One of the more confusing aspect of dealing with classes is knowing when to use &lsquo;self&rsquo; appropriately.  In the context of a Class, &lsquo;self&rsquo; refers to the current class, and is in itself an instance of the class Class.  I know this sounds confusing, but I&rsquo;ll break it down for you momentarily.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Dog
</span><span class='line'>  attr_accessor :name, :breed
</span><span class='line'>
</span><span class='line'>  def self.fake_bark
</span><span class='line'>    "Awooooo!"
</span><span class='line'>  end  
</span><span class='line'> 
</span><span class='line'>  def self.real_bark
</span><span class='line'>    " Woof!"
</span><span class='line'>  end  
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>In this example, self is referring to the class &lsquo;Dog&rsquo;.  Basically, if the class Dog were to encompass all dogs alive in the world, any time that I used Dog.fake_bark, every single dog would give out a fake bark that sounds like &ldquo;Awoooo!&rdquo;  That&rsquo;s a husky or wolf attempting a feeble howl.  If I were to use Dog.real_bark, then every single dog in the world would give out a resounding &ldquo;Woof!&rdquo;</p>

<p>Now let&rsquo;s look at the following example.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Dog
</span><span class='line'>  attr_accessor :name, :breed
</span><span class='line'>
</span><span class='line'>  def fake_bark
</span><span class='line'>    "Awooooo!"
</span><span class='line'>  end  
</span><span class='line'> 
</span><span class='line'>  def real_bark
</span><span class='line'>    " Woof!"
</span><span class='line'>  end  
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>When self is not included in the method, that just means that it is a method that refers to an instance of the class &lsquo;Dog&rsquo;.  So if I were to create a new dog named Fido that is a labrador, then I would do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fido = Dog.new
</span><span class='line'>fido.name = "Fido"
</span><span class='line'>fido.breed = "Labrador"</span></code></pre></td></tr></table></div></figure>


<p>Fido is an instance of the class Dog.  That is an importance distinction to make.  Now, if I call the fake_bark method on Fido without self prefixed, then only Fido will give out that weak attempt of a bark.  Every other dog in the world will be silent, because instances of every other dog hasn&rsquo;t been created in the Dog class.</p>

<p>It took me a while before I could distinguish between the different uses of self.  It&rsquo;s important to note the differences, because it can be come very problematic when you start to write your own programs or applications.  Self in the wrong place and lead to a lot of brain pain &mdash; I learned this the hard way.  Do yourself a favor and learn all of the little nuances of the self keyword.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[HAML: DRY version of ERB?]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/13/haml-dry-version-of-html/"/>
    
    <updated>2013-10-13T22:42:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/13/haml-dry-version-of-html</id>
    
    <content type="html"><![CDATA[<p>Embedded Ruby, or ERB for short, is a Ruby feature that allows a programmer to generate text from a template.  Its aim is to simplify flow control, and utilizes back-end web data to maintain repetitive front-end tasks, such as generating personalized web pages, emails, scripts, and any sort of text file.  In programming speak, ERB is Ruby&rsquo;s built-in template engine.</p>

<p>HAML, an alternative to ERB, stands for HTML Abstraction Markup Language.  HAML was created with Ruby&rsquo;s key principles in mind: markup should be legible, implement DRY, and be well-indented.  ERB uses HTML, which is a verbose markup language, and has proved problematic in meeting Ruby&rsquo;s standards for a seamless experience, and has seemingly felt incompatible with Ruby&rsquo;s language due to the large differences in syntactical structure.  HAML attempts to bridge that divide by creating a more seamless experience.</p>

<p>Let&rsquo;s use an example to compare HAML and ERB.</p>

<p><strong>ERB</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class='dogs' id='sadie&lt;%= dogs.sadie %&gt;'&gt;
</span><span class='line'>  &lt;%= dogs.body %&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>HAML</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.dogs{:sadie =&gt; "dogs#{dogs.sadie}"}= dogs.body</span></code></pre></td></tr></table></div></figure>


<p>Look at the example above.  If you&rsquo;ve used Nokogiri before, then the HAML example may remind you of something.  If you&rsquo;ve ever used Nokogiri or an XML/HTML parsing gem before, you&rsquo;ll notice that the syntax is very similar to that of CSS queries for selectors.  Additionally, white space is used to denote indentation, as is the case with the &ldquo;dogs.body&rdquo; component in the ERB example.  Interpolation is very abundant in HAML as well, and there is no need to close tags in HAML.  Already, HAML has reduced verbosity significantly with just a simple example.</p>

<p>Let&rsquo;s move on to a more complex example.</p>

<p><strong>ERB</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="cat"&gt;
</span><span class='line'>  &lt;div class="name"&gt;&lt;%= name %&gt;&lt;/div&gt;
</span><span class='line'>  &lt;% img_tag img %&gt;
</span><span class='line'>  &lt;div class="kittens"&gt;
</span><span class='line'>      &lt;% kittens.each |kitten| %&gt;
</span><span class='line'>          &lt;div class="kitten"&gt;
</span><span class='line'>              &lt;div class="name"&gt;&lt;% kitten.name %&gt;&lt;/div&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      &lt;% end %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>That was frustrating typing out all of the tags.  Now let&rsquo;s compare that to the HAML version.</p>

<p><strong>HAML</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.cat
</span><span class='line'>  .name= name
</span><span class='line'>  = img_tag img
</span><span class='line'>  .kittens
</span><span class='line'>      - kittens.each |kitten|
</span><span class='line'>          .kitten
</span><span class='line'>              .name= kitten.name</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s amazing how much HAML simplifies the markup template.  I think that I&rsquo;ve displayed the benefits to using HAML.  However, there are two sides to this story.  Because browsers are designed to only understand HTML, there are those that believe abstracting away the key elements of the HTML language via HAML (or other alternatives) makes the front-end component a little more difficult.  There are also compatibility issues with CSS, particularly when it comes to web templates.  WIth that said, it is important to understand ERB simply because it is a universal language, and HAML is not.</p>

<p>I would love to use HAML, but it doesn&rsquo;t seem intuitive to use it when it is not widely utilized in the Ruby community.  I looked up some simple statistics on Stackoverflow.  There were 210,574 tags for HTML discussions alone, and that didn&rsquo;t include more specific HTML queries (HTML5, HTML parsing, XHTML, etc).  HAML had a whopping 1,831 tags for discussions.  I&rsquo;m not a statistician, but I believe that there&rsquo;s statistical significance in that HAML is not widely accepted, and isn&rsquo;t quite a complete alternative to HTML.</p>

<p>With that said, it&rsquo;s nice to know that there are other options out there that are trying to bring Ruby&rsquo;s straightforward syntax to markup languages.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Difference between Each, Select, and Collect Methods]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/07/each/"/>
    
    <updated>2013-10-07T23:31:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/07/each</id>
    
    <content type="html"><![CDATA[<p>Each, Collect, Select</p>

<p>There are three methods that drive the process of data scraping and warehousing in the Ruby language.  These three methods are the following: Each, Collect, and Select.  These three methods are examplees of iterators; iterators are used to organize and store data into a collection.  A collection can be either an array or a hash.</p>

<p>For simplicity, I will refer to an array throughout the rest of the discussion.  I`ll follow up with a concise post on hashes.</p>

<p>The Each method iterates through and returns all of the elements of an array or a hash.    It simply runs each element of the array through the Each code block (the function/modifier that lies between the do and end), and returns that modified value to the console.  For example:</p>

<p><code>array = [2,4,6,8,10]
array.each { |x| puts x * 10 }</code></p>

<p>This would result in the following being output to the screen:</p>

<p><code>20,
40,
60,
80,
100</code></p>

<p>The Each method is great for simple data modification tasks, particularly if you need to obtain the result of that modification.  The major drawback is that it doesn`t provide a means to store the results of the block into an array unless you push those elements into the array.  This is where the Collect method comes in.</p>

<p>The Collect method does the same thing as the Each method, except that it goes one step further and returns the results of the block in the form of an array.  For instance, look at the following example.</p>

<p><code>array = [2,4,6,8,10]
array.collect { |x| x * 10 }</code></p>

<p>This would result in the following output to the screen:</p>

<p><code>[20,40,60,80,100]</code></p>

<p>The array &ldquo;array&rdquo; has been multiplied by the modifier inside of the block, and the collect method has returned an array with the modified values.  The returned array can then be stored in a variable, which has significant benefits in Ruby.  This can be used for many applications, such as arithmetic, problem solving, variable manipulation, and data parsing.</p>

<p>The Select method is a modified version of the Each method, and basically &ldquo;selects&rdquo; objects that meet the predefined condition within the block.  For example, if I wanted to filter out elements from an array that do not meet a conditional statement of some kind, I could do the following:</p>

<p><code>array = [1,2,3,4,5]
array.select { |x| x &gt; 2 }</code></p>

<p>It would return the following to my screen:</p>

<p><code>[3,4,5]</code></p>

<p>It basically will return any element of the array that, when inserted into the conditional statement inside of the block, results in a true statement.</p>

<p>These three statements are already some of my most heavily used components within my Ruby syntax.  I&rsquo;m still learning each day more and more about what they are capable of.  I&rsquo;m excited to learn more about more specific applications of these methods.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Problem Solving and Iteration - Week 3]]></title>
    <link href="http://irmiller22.github.io/blog/2013/10/07/problem-solving-and-iteration/"/>
    
    <updated>2013-10-07T08:48:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/10/07/problem-solving-and-iteration</id>
    
    <content type="html"><![CDATA[<p>Last week, we dove right into database iteration and management.  We focused on the following: SQL, hash iteration, web scraping (via Nokogiri, Open-URI), and logic approaches.</p>

<p>SQL and hash iteration are pretty straightforward as concepts, but they are difficult (for the time being) for me to effectively implement.  We had to implement these concepts in the web-scraping exercise we did last week, and I still have to go back over and do it again, just to make sure I get the concepts down pat.</p>

<p>So, to explain: SQL is a database tool that can be used to integrate data from hashes and arrays into organized tables.  You can also use SQL to join tables together where they share common information (usually something like an ID or user ID &mdash; keys that can tie two charts together).  the exercise that we did last week focused on Reddit.  We used Open-URI to open a connection to Reddit&rsquo;s front page, and Nokogiri pulled down the HTML data into a readable, concise format.  We then used Nokogiri&rsquo;s syntax to sort out the data that we needed for the exercise (Top 100 posts: name of post, URL of post origin, upvotes, downvotes).</p>

<p>In order to create SQL tables, you use the following command:</p>

<pre><code>            CREATE TABLE users 
                    (
                    var1 TYPE,
                    var2 TYPE,
                    var3, TYPE
                    ); 
</code></pre>

<p>This just creates the tables with the variables var1, var2, var3, and they are of data type TYPE (which can be INTEGER, TEXT, DATE, etc).</p>

<p>To insert values into the table, you use the following command:</p>

<pre><code>            INSERT INTO users VALUES (var1, var2, var3)
                    ("John", 25, 2010),
                    ("James", 21, 2011),
                    ("Steve", 19, 2010);
</code></pre>

<p>To follow up with that, there are JOINS statements: INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, AND FULL OUTER JOIN.</p>

<pre><code>    INNER JOIN - Produce only records for which there is a match from table A and table B

    LEFT OUTER JOIN - Produces complete set of records for table A, along with matching records from table B if they exist; otherwise the value is NULL.

    RIGHT OUTER JOIN - Produces complete set of records for table B, along with matching records from A if they exist; otherwise the value is NULL.

    FULL OUTER JOIN - Produces complete set of records from both tables; when there isn't a match, the value is NULL.
</code></pre>

<p>Moving on to Hashes.  Hashes are one of the most fundamental concepts in the Ruby language, and enable a wide array of possibilities if they are properly utilized.  In other languages, the hash structure is referred to as a dictionary.  It has a key-value pair, so for each respective key, there is a value, just as in a dictionary, there is a definition for each word.</p>

<p>The way to visualize a hash is via the following:</p>

<pre><code>                hash = { :dog =&gt; 'canine', :cat =&gt; 'feline'}
</code></pre>

<p>How do you access the value for &lsquo;dog&rsquo;?  By simply typing in hash[:dog].  This will return the string &lsquo;canine&rsquo;.  How do you add a new element to the hash?  By simply typing in the key you want into the key field, and setting it equal to its value.  For example, hash[:elephant] = &lsquo;mammal&rsquo; will insert :elephant => &lsquo;mammal&rsquo; into the hash.  Finally, the default return value of a hash is nil.</p>

<p>My objective for this week is to work on further solidifying my understanding of hashes, how to iterate through them effectively, and utimately get a web-scraping objective finalized.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Start of Week 2]]></title>
    <link href="http://irmiller22.github.io/blog/2013/09/30/start-of-week-2/"/>
    
    <updated>2013-09-30T08:42:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/09/30/start-of-week-2</id>
    
    <content type="html"><![CDATA[<p>Today is the start of Week 2 at Flatiron.  It&rsquo;s been quite a start to the semester.  We spent last week going over Github, Ruby, SQL, and a lot of logic exercises to understand how to think like a computer.  It&rsquo;s interesting because humans understand things organically and semantically, whereas a computer is very literal in its understanding.  For example, we as humans make assumptions or calculated decision-making to fill in details about another person or thing.  For example, if we see a dog on the street, we assume that it&rsquo;s a stray dog if it is dirty or has a disheveled appareance.  On the other hand, if it is nicely groomed, we may assume that it&rsquo;s simply lost.  Computers have to be given a very specific set of instructions or information regarding something.  In the case of the dog, we may have to do something like this: (dog = &ldquo;stray&rdquo;).</p>

<p>If dog == &ldquo;stray&rdquo;</p>

<pre><code>human.do_not_intervene(dog)
</code></pre>

<p>Elsif dog != &ldquo;stray&rdquo;</p>

<pre><code>human.intervene(dog)
</code></pre>

<p>End</p>

<p>That&rsquo;s a basic if-else statement to illustrate the dog example.  Basically, if the dog is a stray, the computer understands this as: &ldquo;the human should not intervene specifically with the dog.&rdquo;  However, if the dog is not (!=) a stray: &ldquo;the human should intervene specifically with the dog.&rdquo;</p>

<p>The logic is simple, but when building programs that have more complex arguments and parameters, it can get a little confusing.  Most of my time during the first week was spent experimenting with different loop types and understanding what you can and can&rsquo;t do with methods, data types (arrays, hashes, strings, etc), and code organization.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Flatiron Progression: Day 3]]></title>
    <link href="http://irmiller22.github.io/blog/2013/09/25/flatiron-progression-day-3/"/>
    
    <updated>2013-09-25T23:09:00-04:00</updated>
    <id>http://irmiller22.github.io/blog/2013/09/25/flatiron-progression-day-3</id>
    
    <content type="html"><![CDATA[<p>Today was Day 3 of my program at Flatiron.  Over the past two days, I&rsquo;ve been immersed in a crash course for GitHub, HTML, CSS, and Ruby.  In the midst of all of this, I&rsquo;ve been getting quite familiar with my Terminal, and I&rsquo;ve learned a lot of useful shortcuts that I never knew about in the past.  I&rsquo;ve quickly realized the benefit of using Terminal as a file management system versus a GUI (graphical user interface), which is what most users typically interact with on a computer.  Coming from a Excel modeling background, the added bonus of knowing shortcuts does wonders for productivity in regards to development.  While being exposed to many different formats of code, I&rsquo;m also learning how to best manage my time.</p>

<p>We have been discussing the importance of the programmer ethos over the past day and a half.  If you&rsquo;re interested in reading the essay that captures this methodology, look for &ldquo;Hackers and Painters,&rdquo; an essay by Paul Graham.  Graham&rsquo;s point is that hackers and painters are both alike in that they are makers.  There are a lot of misconceptions of what a software developer/hacker actually does, and ambiguous terms such as computer scientist don&rsquo;t contribute any clarity towards identifying that.  Like a painter, a hacker spends time learning more about his skillset, and better understanding the nuances of certain techniques, and how they can be applied towards achieving a certain goal or task.  Over time, ugly creations become less and less, and beautiful ideas tend to thrive through the process of iteration, debugging, and creative destruction.</p>

<p>The big take-away that I took from Graham was that makers basically learn from examples.  Like a painter who copies a famous painting to understand the techniques applied, a hacker learns to program by closely following good program (syntax, logic, etc).  Skillsets improve via gradual refinement, and hackers improve through an iterative process just as a painter begins with a sketch and follows up by filling it in, piece by piece.  I&rsquo;ve taken that first big step.</p>
]]></content>
    
  </entry>
  
</feed>