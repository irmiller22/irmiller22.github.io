<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cucumber | Archaic Positives]]></title>
  <link href="http://irmiller22.github.io/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://irmiller22.github.io/"/>
  <updated>2014-03-31T11:01:50-04:00</updated>
  <id>http://irmiller22.github.io/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Foray into Cucumber Feature Testing]]></title>
    <link href="http://irmiller22.github.io/blog/2014/02/23/foray-into-cucumber-feature-testing/"/>
    <updated>2014-02-23T14:45:33-05:00</updated>
    <id>http://irmiller22.github.io/blog/2014/02/23/foray-into-cucumber-feature-testing</id>
    <content type="html"><![CDATA[<p>For the past 2 weeks, I have been getting more involved in Cucumber feature testing as a result of my day-to-day job. When I first started, I found the prospect of Rails feature testing daunting, because it seemed like a cumbersome task to implement on top of building actual application features.</p>

<p>We had built out some features for a client project that I&rsquo;m currently working on, and we had decided to implement testing for features via Cucumber, rather than solely relying on RSpec testing. There was a reason for taking this approach: when designing a feature, we didn&rsquo;t want to overtest our feature to the point where we were overemphasizing testing of what could be a very basic feature. Cucumber allows for all-around integration testing without being overly verbose and cumbersome.</p>

<p>The first feature test I wrote was for a &ldquo;Forgotten Password&rdquo; feature. I had to test a User that had forgotten his/her password, clicked on the &ldquo;Forgot Password?&rdquo; option at the login screen, and expect to recieve an email with instructions to reset the password. So you would set up the feature test as follows:</p>

<p><code>ruby Feature Story
Feature: Partner Password Reset
  As a Partner who forgot the password
  I need to be able to reset the password
  So that I can log in
</code></p>

<p>The feature description describes the storyline in very simple, straightforward terms. You need three things when describing a feature: who, what, and why. As in English literature, those three questions are essential to building up any kind of story. Then I would describe the first scenario:</p>

<p><code>ruby Feature Scenario
Scenario: Send Reset Password Email
  Given I am a Partner who has forgotten the password
  When I am at the 'Forgot your password?' page
  And I type in my admin email address
  Then it should send me a 'Reset password instructions' email
  And it should come from the default administrator email address
</code></p>

<p>The scenario describes step-by-step how the feature is  going to be tested, what the conditions are, and how the expectations should be met. You describe scenarios with three major keywords: <code>Given</code>, <code>When</code>, and <code>Then</code>. <code>Given</code> implies an implicit condition that is required for the scenario. <code>When</code> specifies an action or verb that should take place. <code>Then</code> explicitly states the result that should occur as a result of the action that took place under the <code>When</code> clause.</p>

<p>Once you run the cucumber command in Terminal, the Terminal will generate a list of steps, or tests, that correspond to the scenario that you have written out. The following is a such output of the reset password scenario discussed earlier.</p>

<p>```ruby Reset Password Scenario Steps
Given(/^I am a Partner who has forgotten the password$/) do
  #pending
end</p>

<p>When(/^I am at the &lsquo;Forgot your password\?&rsquo; page$/) do
  #pending
end</p>

<p>When(/^I type in my admin email address$/) do
  #pending
end</p>

<p>Then(/^it should send me a &lsquo;Reset password instructions&rsquo; email$/) do
  #pending
end</p>

<p>Then(/^it should come from the default NYTM address$/) do
  #pending
end</p>

<p>Then(/^it should result in a &lsquo;not found&rsquo; error message$/) do
  #pending
end
```</p>

<p>Once the Cucumber test steps are generated and incorporated into a step definition script, then you can start filling in the test code as it corresponds to your application. In this situation, I need to generate a user object (via FactoryGirl-Rails gem that has been included in the Gemfile), manipulate the user interface via Capybara methods. The finalized step definitions are shown below.</p>

<p>```ruby Reset Password Scenario Steps
Given(/^I am a Partner who has forgotten the password$/) do
  @user = FactoryGirl.create(:admin_user)
end</p>

<p>When(/^I am at the &lsquo;Forgot your password\?&rsquo; page$/) do
  visit new_admin_user_password_path
end</p>

<p>When(/^I type in my admin email address$/) do
  fill_in &ldquo;Email&rdquo;, with: @user.email
  click_on &lsquo;Reset My Password&rsquo;
end</p>

<p>Then(/^it should send me a &lsquo;Reset password instructions&rsquo; email$/) do
  @email = ActionMailer::Base.deliveries.first
  expect(@email.to.first).to eq(@user.email)
  expect(@email.subject).to eq(&lsquo;Reset password instructions&rsquo;)
end</p>

<p>Then(/^it should come from the default mailing address$/) do
  expect(@email.from.first).to eq(&lsquo;<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x6f;&#114;&#x69;&#x67;&#105;&#110;&#x61;&#x6c;&#64;&#109;&#97;&#x69;&#108;&#105;&#110;&#103;&#46;&#99;&#x6f;&#109;">&#x6f;&#114;&#x69;&#x67;&#x69;&#110;&#x61;&#x6c;&#64;&#109;&#97;&#x69;&#108;&#x69;&#110;&#103;&#x2e;&#x63;&#x6f;&#x6d;</a>&rsquo;)
end</p>

<p>Given(/^I am not a Partner$/) do
  @user = FactoryGirl.build(:admin_user)
end</p>

<p>When(/^I type in a non-admin email address$/) do
  fill_in &ldquo;Email&rdquo;, with: @user.email
  click_on &lsquo;Reset My Password&rsquo;
end</p>

<p>Then(/^it should result in a &lsquo;not found&rsquo; error message$/) do
  expect(page).to have_css(&lsquo;.inline-errors&rsquo;, :text => &ldquo;not found&rdquo;)
end
```</p>

<p>Hopefully this gives you a general idea of how Cucumber feature tests are implemented. Each scenario that you generate must be short, succinct, and straightforward in regards to the feature that you&rsquo;re testing. It took me a while to figure out best practices for implementing such tests, but I was able to get the hang of it over the course of two weeks. Just keep practicing, and see if the feature story makes sense to you.</p>
]]></content>
  </entry>
  
</feed>
