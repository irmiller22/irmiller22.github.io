<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cucumber | Archaic Positives]]></title>
  <link href="http://ianmiller.nyc/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://ianmiller.nyc/"/>
  <updated>2014-10-30T10:48:20-04:00</updated>
  <id>http://ianmiller.nyc/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Foray into Cucumber Feature Testing]]></title>
    <link href="http://ianmiller.nyc/blog/2014/02/23/foray-into-cucumber-feature-testing/"/>
    <updated>2014-02-23T14:45:33-05:00</updated>
    <id>http://ianmiller.nyc/blog/2014/02/23/foray-into-cucumber-feature-testing</id>
    <content type="html"><![CDATA[<p>For the past 2 weeks, I have been getting more involved in Cucumber feature testing as a result of my day-to-day job. When I first started, I found the prospect of Rails feature testing daunting, because it seemed like a cumbersome task to implement on top of building actual application features.</p>

<p>We had built out some features for a client project that I&rsquo;m currently working on, and we had decided to implement testing for features via Cucumber, rather than solely relying on RSpec testing. There was a reason for taking this approach: when designing a feature, we didn&rsquo;t want to overtest our feature to the point where we were overemphasizing testing of what could be a very basic feature. Cucumber allows for all-around integration testing without being overly verbose and cumbersome.</p>

<p>The first feature test I wrote was for a &ldquo;Forgotten Password&rdquo; feature. I had to test a User that had forgotten his/her password, clicked on the &ldquo;Forgot Password?&rdquo; option at the login screen, and expect to recieve an email with instructions to reset the password. So you would set up the feature test as follows:</p>

<pre><code class="ruby Feature Story">Feature: Partner Password Reset
  As a Partner who forgot the password
  I need to be able to reset the password
  So that I can log in
</code></pre>

<p>The feature description describes the storyline in very simple, straightforward terms. You need three things when describing a feature: who, what, and why. As in English literature, those three questions are essential to building up any kind of story. Then I would describe the first scenario:</p>

<pre><code class="ruby Feature Scenario">Scenario: Send Reset Password Email
  Given I am a Partner who has forgotten the password
  When I am at the 'Forgot your password?' page
  And I type in my admin email address
  Then it should send me a 'Reset password instructions' email
  And it should come from the default administrator email address
</code></pre>

<p>The scenario describes step-by-step how the feature is  going to be tested, what the conditions are, and how the expectations should be met. You describe scenarios with three major keywords: <code>Given</code>, <code>When</code>, and <code>Then</code>. <code>Given</code> implies an implicit condition that is required for the scenario. <code>When</code> specifies an action or verb that should take place. <code>Then</code> explicitly states the result that should occur as a result of the action that took place under the <code>When</code> clause.</p>

<p>Once you run the cucumber command in Terminal, the Terminal will generate a list of steps, or tests, that correspond to the scenario that you have written out. The following is a such output of the reset password scenario discussed earlier.</p>

<pre><code class="ruby Reset Password Scenario Steps">Given(/^I am a Partner who has forgotten the password$/) do
  #pending 
end

When(/^I am at the 'Forgot your password\?' page$/) do
  #pending
end

When(/^I type in my admin email address$/) do
  #pending
end

Then(/^it should send me a 'Reset password instructions' email$/) do
  #pending
end

Then(/^it should come from the default NYTM address$/) do
  #pending
end

Then(/^it should result in a 'not found' error message$/) do
  #pending
end
</code></pre>

<p>Once the Cucumber test steps are generated and incorporated into a step definition script, then you can start filling in the test code as it corresponds to your application. In this situation, I need to generate a user object (via FactoryGirl-Rails gem that has been included in the Gemfile), manipulate the user interface via Capybara methods. The finalized step definitions are shown below.</p>

<pre><code class="ruby Reset Password Scenario Steps">Given(/^I am a Partner who has forgotten the password$/) do
  @user = FactoryGirl.create(:admin_user)
end

When(/^I am at the 'Forgot your password\?' page$/) do
  visit new_admin_user_password_path
end

When(/^I type in my admin email address$/) do
  fill_in "Email", with: @user.email
  click_on 'Reset My Password'
end

Then(/^it should send me a 'Reset password instructions' email$/) do
  @email = ActionMailer::Base.deliveries.first
  expect(@email.to.first).to eq(@user.email)
  expect(@email.subject).to eq('Reset password instructions')
end

Then(/^it should come from the default mailing address$/) do
  expect(@email.from.first).to eq('original@mailing.com')
end

Given(/^I am not a Partner$/) do
  @user = FactoryGirl.build(:admin_user)
end

When(/^I type in a non\-admin email address$/) do
  fill_in "Email", with: @user.email
  click_on 'Reset My Password'
end

Then(/^it should result in a 'not found' error message$/) do
  expect(page).to have_css('.inline-errors', :text =&gt; "not found")
end
</code></pre>

<p>Hopefully this gives you a general idea of how Cucumber feature tests are implemented. Each scenario that you generate must be short, succinct, and straightforward in regards to the feature that you&rsquo;re testing. It took me a while to figure out best practices for implementing such tests, but I was able to get the hang of it over the course of two weeks. Just keep practicing, and see if the feature story makes sense to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions and Thoughts About Cucumber for Myself]]></title>
    <link href="http://ianmiller.nyc/blog/2014/02/19/questions-about-cucumber/"/>
    <updated>2014-02-19T09:58:47-05:00</updated>
    <id>http://ianmiller.nyc/blog/2014/02/19/questions-about-cucumber</id>
    <content type="html"><![CDATA[<p>Questions:</p>

<ul>
<li>Why does a <code>ActionController::RoutingError</code> pop up even though all of the scenario steps are passing? This has been a recurring issue.</li>
<li>This was breaking because of &lsquo;visit admin_partner_path(@user)&rsquo; that was in the final step of <code>/step_definitions/admin_user_change_password.rb</code></li>
<li>How explicit must I be when testing a feature? What&rsquo;s the balance between being too explicit in my feature testing, and not covering everything that should be tested?</li>
</ul>


<p>Tips regarding Cucumber:</p>

<ul>
<li>Backgrounds should only be used when you have shared context, but should be used sparingly</li>
<li>Want to frame our scenarios with user-driven language, not task-specific language</li>
<li>Given is used to identify your starting point; if you&rsquo;re testing a password feature, then you should be on the &lsquo;Edit&rsquo; page for the User</li>
<li>When is used to specify an Action of some kind; never use an assertion in a When clause</li>
<li>Then is where you make assertions for the test</li>
</ul>


<p>Warden:</p>

<ul>
<li>Warden test helpers for Cucumber will automatically log you in for a test without actually walking through the login steps
<code>ruby features/support/warden.rb
Warden.test_mode!
World Warden::Test::Helpers
After { Warden.test_reset! }
</code></li>
<li>Only time, from this point forward, that you should visit and fill-in a login form is if you&rsquo;re explicitly testing the login feature</li>
<li>If you need to be logged in as a Partner, use the <code>Given I am logged in as a Partner</code> step. Same for other AdminUser roles as well.</li>
<li>FactoryGirl helpers in cucumber will enable you to implicitly imply FactoryGirl object
<code>ruby features/support/env.rb
World(FactoryGirl::Syntax:Methods)
</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
