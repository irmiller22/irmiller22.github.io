<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | Archaic Positives]]></title>
  <link href="http://blog.ianmiller.nyc/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://blog.ianmiller.nyc/"/>
  <updated>2016-04-03T18:58:07-04:00</updated>
  <id>http://blog.ianmiller.nyc/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating a AWS Proxy into a Flask app]]></title>
    <link href="http://blog.ianmiller.nyc/2016/04/02/integrating-a-aws-proxy-into-a-flask-app/"/>
    <updated>2016-04-02T16:45:03-04:00</updated>
    <id>http://blog.ianmiller.nyc/2016/04/02/integrating-a-aws-proxy-into-a-flask-app</id>
    <content type="html"><![CDATA[<p>I ran into an issue recently when I was working on Percolate&rsquo;s <code>Hello</code>
application, which serves as Percolate&rsquo;s intranet. We have API
documentation that is generated by our application codebase, and pushed
up to AWS S3 for storage and hosting purposes. It wasn&rsquo;t immediately
clear to me how to proxy the documentation effectively. Do I download
the documentation files from AWS, and render each file as a template?
Turns out it&rsquo;s a lot simpler than that.</p>

<h2>What is <code>Hello</code>?</h2>

<p><code>Hello</code> is a Flask application that we use as an intranet at Percolate.
<a href="http://flask.pocoo.org">Flask</a> is a great Python framework that allows
us to build small, flexible applications. In our case, we&rsquo;ve used it to
host documentation, serve an API that interfaces with Namely, and also
index information specific to Percolate.</p>

<h2>The Initial Problem</h2>

<p>So the first issue that I ran into was trying to figure out how to
properly proxy documentation hosted on AWS S3 through the Hello
application. Due to some initial confusion that I had, I didn&rsquo;t know if
AWS S3 would support relative links if they&rsquo;re proxied on Hello. For
example, if an HTML file is proxied, would the relative links on the
AWS bucket (for example, CSS/JS files in the HTML file), would those
relative links be loaded? I experimented first by downloading the files
from S3 to the local filesystem for Hello.</p>

<h3>Fail - Other Options?</h3>

<p>It turned out to be a failure, because downloading them into the
application&rsquo;s local filesystem was breaking the relative links in all of
the HTML templates. I would either have to host the asset files
internally from within the application, or find another option forward.
It turns out, there&rsquo;s a method called <code>open_read</code> in <a href="https://github.com/boto/boto/blob/e34721de504265fc8f4ed0c999d61365ae1f6401/boto/s3/key.py#L270-L322">boto&rsquo;s Key
library</a>
that will allow us to render the HTML template in the application, even
though it&rsquo;s being hosted on AWS S3. So here&rsquo;s how we set up the <code>/docs</code>
endpoint URL in Hello:</p>

<pre><code class="python">@app.route("/docs/&lt;path:aws_key_name&gt;", methods=['GET'])
def s3_key(aws_key_name):
    if aws_key_name.endswith('/'):
        aws_pathname = aws_pathname + 'index.html'

    s3_doc = HelloS3.find_doc_in_bucket(aws_pathname)
    if s3_doc:
        try:
            s3_doc.open_read()
        except S3ResponseError as e:
            return Response(e.body, status=e.status,
                            headers=s3_doc.resp.get_headers())

       headers = dict(s3_doc.resp.get_headers())
       return Response(s3_doc, headers=headers)

    return abort(404)
</code></pre>

<p> So to recap, here&rsquo;s what we&rsquo;re doing with the logic above. Remember
 that the documentation we&rsquo;re hosting on AWS has an <code>index.html</code>
 template stored in teh documentation&rsquo;s directory. For example,
 documentation for the <code>animals</code> API is going to be rendered via a
 <code>index.html</code> template, so the path for that documentation would be
 <code>/penguins/index.html</code>. So we have to account for that in our logic. Whenever
 someone types in a request, let&rsquo;s say <code>/docs/example_key/</code>, it sets
 <code>aws_key_name = example_key/</code>. If the key name ends with <code>/</code>, then it
 will automatically append <code>index.html</code> to the end. Then we have a
 module called <code>HelloS3</code> that will search for that key in the AWS S3
 bucket. If it exists, It will proxy that file through our application.
 If it can&rsquo;t find a file, then it will return a 404 page.</p>

<h2>Lesson Learned</h2>

<p> Instead of trying to build out everything yourself, check to see if
 there&rsquo;s a simpler solution right in front of you. There was one in the
 <code>boto</code> package, and I missed it. I hope this helps someone else out!</p>
]]></content>
  </entry>
  
</feed>
