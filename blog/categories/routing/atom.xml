<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: routing | Archaic Positives]]></title>
  <link href="http://irmiller22.github.io/blog/categories/routing/atom.xml" rel="self"/>
  <link href="http://irmiller22.github.io/"/>
  <updated>2016-04-03T15:46:59-04:00</updated>
  <id>http://irmiller22.github.io/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Questions and Thoughts About Cucumber for Myself]]></title>
    <link href="http://irmiller22.github.io/blog/2014/02/19/questions-about-cucumber/"/>
    <updated>2014-02-19T09:58:47-05:00</updated>
    <id>http://irmiller22.github.io/blog/2014/02/19/questions-about-cucumber</id>
    <content type="html"><![CDATA[<p>Questions:</p>

<ul>
<li>Why does a <code>ActionController::RoutingError</code> pop up even though all of the scenario steps are passing? This has been a recurring issue.</li>
<li>This was breaking because of &lsquo;visit admin_partner_path(@user)&rsquo; that was in the final step of <code>/step_definitions/admin_user_change_password.rb</code></li>
<li>How explicit must I be when testing a feature? What&rsquo;s the balance between being too explicit in my feature testing, and not covering everything that should be tested?</li>
</ul>


<p>Tips regarding Cucumber:</p>

<ul>
<li>Backgrounds should only be used when you have shared context, but should be used sparingly</li>
<li>Want to frame our scenarios with user-driven language, not task-specific language</li>
<li>Given is used to identify your starting point; if you&rsquo;re testing a password feature, then you should be on the &lsquo;Edit&rsquo; page for the User</li>
<li>When is used to specify an Action of some kind; never use an assertion in a When clause</li>
<li>Then is where you make assertions for the test</li>
</ul>


<p>Warden:</p>

<ul>
<li>Warden test helpers for Cucumber will automatically log you in for a test without actually walking through the login steps
<code>ruby features/support/warden.rb
Warden.test_mode!
World Warden::Test::Helpers
After { Warden.test_reset! }
</code></li>
<li>Only time, from this point forward, that you should visit and fill-in a login form is if you&rsquo;re explicitly testing the login feature</li>
<li>If you need to be logged in as a Partner, use the <code>Given I am logged in as a Partner</code> step. Same for other AdminUser roles as well.</li>
<li>FactoryGirl helpers in cucumber will enable you to implicitly imply FactoryGirl object
<code>ruby features/support/env.rb
World(FactoryGirl::Syntax:Methods)
</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
