<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | Archaic Positives]]></title>
  <link href="http://irmiller22.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://irmiller22.github.io/"/>
  <updated>2014-04-25T18:00:21-04:00</updated>
  <id>http://irmiller22.github.io/</id>
  <author>
    <name><![CDATA[Ian Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Controller Testing Via RSpec]]></title>
    <link href="http://irmiller22.github.io/blog/2014/02/27/controller-testing-via-rspec/"/>
    <updated>2014-02-27T10:01:37-05:00</updated>
    <id>http://irmiller22.github.io/blog/2014/02/27/controller-testing-via-rspec</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been testing controllers pretty often over the last few weeks, and wanted to write a few reminders to my future self. I&rsquo;ve been testing an app at work with RSpec, and have gleaned a few best practices to integrate into my unit tests for controllers.</p>

<p>First off, the purpose of controller testing is to test the controller actions directly and see what they do. For example, if we are testing a redirect, we want to make sure that the controller action is redirecting to the right path. It&rsquo;s important to follow the AAA pattern: Arrange, Act, and Assert. You set up the test by arranging a <code>before(:each)</code> statement, and setting up the data needed to execute a test via let blocks. Then you act upon the arranged data by manipulating it to the test&rsquo;s specifications. Then you assert that the arranged data should result in some specific action or result. Arrange, act, and assert.</p>

<p>Another tip to keep in mind. Avoid before(:all) statements whenever possible, because you hardly will ever need it, and it sort of goes against Sandi Metz&rsquo;s Single Responsibility Principle (SRP). If you ever actually do need it, you are most likely dealing with a very extraordinary circumstance. The before(:all) block can affect test-data stability due to unwanted side effects.</p>

<p>For BDD/Rspec language, prefer to use active language instead of passive language. Of course the system should do something. Let&rsquo;s write tests where the language asserts definitively that it does or does not do something, thereby documenting not what our system should do but what it does do. It&rsquo;s important to be as clear and succinct in our language about what our expectations are.</p>

<p>Finally, a small but important distinction between <code>let()</code> and <code>let!()</code>. An object defined in a <code>let()</code> statement is lazily evaluated, meaning that it won&rsquo;t instantiate that object until it has been called in a RSpec test. However, an object defined in a <code>let!()</code> statement is forcefully evaluated, and the object will be instantiated once the statement has been invoked.</p>

<p>Hopefully these thoughts and insights will prove useful to someone, as they will for me in the near future.</p>
]]></content>
  </entry>
  
</feed>
